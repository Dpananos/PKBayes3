
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace _008_combined_data_model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 162> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 55, column 2 to column 14)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 56, column 2 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 57, column 2 to column 30)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 59, column 2 to column 15)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 60, column 2 to column 20)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 61, column 2 to column 29)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 63, column 2 to column 29)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 64, column 2 to column 31)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 65, column 2 to column 50)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 67, column 2 to column 24)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 68, column 2 to column 24)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 70, column 2 to column 16)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 71, column 2 to column 24)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 72, column 2 to column 33)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 74, column 2 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 76, column 2 to column 16)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 77, column 2 to column 19)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 78, column 2 to column 20)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 79, column 2 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 81, column 2 to column 15)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 82, column 2 to column 18)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 83, column 2 to column 19)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 84, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 89, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 91, column 2 to column 16)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 93, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 97, column 2 to column 182)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 98, column 2 to column 180)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 99, column 2 to column 128)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 100, column 2 to column 79)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 101, column 2 to column 90)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 102, column 2 to column 72)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 103, column 2 to column 47)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 105, column 2 to column 160)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 108, column 1 to column 158)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 109, column 2 to column 159)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 110, column 2 to column 98)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 111, column 2 to column 68)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 112, column 2 to column 46)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 113, column 2 to column 85)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 115, column 2 to column 50)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 116, column 2 to column 51)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 119, column 4 to column 83)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 118, column 16 to line 120, column 3)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 118, column 2 to line 120, column 3)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 121, column 2 to column 65)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 172, column 2 to column 54)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 173, column 2 to column 54)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 128, column 2 to column 34)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 129, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 130, column 2 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 132, column 2 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 133, column 2 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 134, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 137, column 2 to column 31)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 138, column 2 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 139, column 2 to column 24)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 141, column 2 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 143, column 2 to column 20)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 144, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 145, column 2 to column 42)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 147, column 2 to column 29)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 148, column 2 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 149, column 2 to column 33)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 150, column 2 to column 36)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 152, column 2 to column 28)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 153, column 2 to column 31)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 154, column 2 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 155, column 2 to column 35)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 160, column 2 to column 35)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 162, column 2 to column 42)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 164, column 2 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 166, column 2 to column 37)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 167, column 2 to column 37)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 168, column 2 to column 47)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 169, column 2 to column 47)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 8, column 2 to column 10)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 9, column 19 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 9, column 2 to column 24)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 10, column 2 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 11, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 11, column 2 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 12, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 12, column 2 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 14, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 14, column 2 to column 35)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 15, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 15, column 2 to column 34)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 16, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 16, column 2 to column 38)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 17, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 17, column 2 to column 31)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 18, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 18, column 2 to column 29)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 21, column 2 to column 10)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 22, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 22, column 2 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 23, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 23, column 2 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 25, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 25, column 2 to column 24)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 26, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 26, column 2 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 27, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 27, column 2 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 28, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 28, column 2 to column 20)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 29, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 29, column 2 to column 18)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 30, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 30, column 2 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 31, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 31, column 2 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 35, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 35, column 2 to column 84)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 36, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 36, column 2 to column 72)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 37, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 37, column 2 to column 100)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 38, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 38, column 2 to column 101)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 39, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 39, column 2 to column 42)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 42, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 42, column 2 to column 73)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 43, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 43, column 2 to column 61)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 44, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 44, column 2 to column 89)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 45, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 45, column 2 to column 42)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 46, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 46, column 2 to column 92)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 48, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 48, column 2 to column 67)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 49, column 9 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 49, column 2 to column 64)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 50, column 2 to column 19)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 57, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 61, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 65, column 27 to column 41)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 72, column 9 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 97, column 18 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 98, column 18 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 99, column 27 to column 41)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 100, column 18 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 101, column 18 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 102, column 18 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 105, column 18 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 108, column 17 to column 20)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 109, column 18 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 110, column 27 to column 30)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 111, column 18 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 112, column 18 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 113, column 27 to column 30)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 115, column 18 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 116, column 18 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 172, column 14 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 173, column 14 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 3, column 4 to column 86)",
 " (in '/Users/demetri/gitrepos/PKBayes3/models/008_combined_data_model.stan', line 2, column 85 to line 4, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>, -1, 1>
concentration(const T0__& t_arg__, const T1__& D_arg__, const T2__& F_arg__,
              const T3__& Cl_arg__, const T4__& ka_arg__,
              const T5__& ke_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>;
  int current_statement__ = 0; 
  const auto& t = to_ref(t_arg__);
  const auto& D = to_ref(D_arg__);
  const auto& F = to_ref(F_arg__);
  const auto& Cl = to_ref(Cl_arg__);
  const auto& ka = to_ref(ka_arg__);
  const auto& ke = to_ref(ke_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 160;
    return elt_multiply(
             elt_divide(
               elt_multiply(elt_multiply(elt_multiply(D, F), ka), ke),
               elt_multiply(Cl, subtract(ke, ka))),
             subtract(stan::math::exp(elt_multiply(minus(ka), t)),
               stan::math::exp(elt_multiply(minus(ke), t))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct concentration_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>, -1, 1>
operator()(const T0__& t, const T1__& D, const T2__& F, const T3__& Cl,
           const T4__& ka, const T5__& ke, std::ostream* pstream__)  const 
{
return concentration(t, D, F, Cl, ka, ke, pstream__);
}
};

class _008_combined_data_model_model final : public model_base_crtp<_008_combined_data_model_model> {

 private:
  int r_n;
  std::vector<int> r_subjectids;
  int r_n_subjectids;
  Eigen::Matrix<double, -1, 1> r_time__;
  Eigen::Matrix<double, -1, 1> r_yobs__;
  Eigen::Matrix<double, -1, 1> r_is_male__;
  Eigen::Matrix<double, -1, 1> r_weight__;
  Eigen::Matrix<double, -1, 1> r_creatinine__;
  Eigen::Matrix<double, -1, 1> r_age__;
  Eigen::Matrix<double, -1, 1> r_D__;
  int u_n;
  Eigen::Matrix<double, -1, 1> u_time__;
  Eigen::Matrix<double, -1, 1> u_yobs__;
  Eigen::Matrix<double, -1, 1> u_is_male__;
  Eigen::Matrix<double, -1, 1> u_weight__;
  Eigen::Matrix<double, -1, 1> u_creatinine__;
  Eigen::Matrix<double, -1, 1> u_age__;
  Eigen::Matrix<double, -1, 1> u_D__;
  Eigen::Matrix<double, -1, 1> u_amiodarone__;
  Eigen::Matrix<double, -1, 1> u_diltiazem__;
  Eigen::Matrix<double, -1, 1> r_scaled_weight__;
  Eigen::Matrix<double, -1, 1> r_scaled_age__;
  Eigen::Matrix<double, -1, 1> r_scaled_creatinine__;
  Eigen::Matrix<double, -1, -1> X__;
  Eigen::Matrix<double, -1, 1> r_yobs_scaled__;
  Eigen::Matrix<double, -1, 1> u_scaled_weight__;
  Eigen::Matrix<double, -1, 1> u_scaled_age__;
  Eigen::Matrix<double, -1, 1> u_scaled_creatinine__;
  Eigen::Matrix<double, -1, 1> u_yobs_scaled__;
  Eigen::Matrix<double, -1, -1> u_X__;
  Eigen::Matrix<double, -1, 1> u_amiodarone_scaled__;
  Eigen::Matrix<double, -1, 1> u_diltiazem_scaled__;
  Eigen::Matrix<double, -1, 1> tpred__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_yobs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_is_male{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_weight{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_creatinine{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_age{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_D{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_yobs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_is_male{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_weight{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_creatinine{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_age{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_D{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_amiodarone{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_diltiazem{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_scaled_weight{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_scaled_age{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_scaled_creatinine{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> r_yobs_scaled{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_scaled_weight{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_scaled_age{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_scaled_creatinine{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_yobs_scaled{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> u_X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_amiodarone_scaled{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u_diltiazem_scaled{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> tpred{nullptr, 0};
 
 public:
  ~_008_combined_data_model_model() { }
  
  inline std::string model_name() const final { return "_008_combined_data_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  _008_combined_data_model_model(stan::io::var_context& context__,
                                 unsigned int random_seed__ = 0,
                                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "_008_combined_data_model_model_namespace::_008_combined_data_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 77;
      context__.validate_dims("data initialization","r_n","int",
           std::vector<size_t>{});
      r_n = std::numeric_limits<int>::min();
      
      current_statement__ = 77;
      r_n = context__.vals_i("r_n")[(1 - 1)];
      current_statement__ = 78;
      validate_non_negative_index("r_subjectids", "r_n", r_n);
      current_statement__ = 79;
      context__.validate_dims("data initialization","r_subjectids","int",
           std::vector<size_t>{static_cast<size_t>(r_n)});
      r_subjectids = std::vector<int>(r_n, std::numeric_limits<int>::min());
      
      current_statement__ = 79;
      r_subjectids = context__.vals_i("r_subjectids");
      current_statement__ = 80;
      context__.validate_dims("data initialization","r_n_subjectids","int",
           std::vector<size_t>{});
      r_n_subjectids = std::numeric_limits<int>::min();
      
      current_statement__ = 80;
      r_n_subjectids = context__.vals_i("r_n_subjectids")[(1 - 1)];
      current_statement__ = 81;
      validate_non_negative_index("r_time", "r_n", r_n);
      current_statement__ = 82;
      context__.validate_dims("data initialization","r_time","double",
           std::vector<size_t>{static_cast<size_t>(r_n)});
      r_time__ = Eigen::Matrix<double, -1, 1>(r_n);
      new (&r_time) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_time__.data(), r_n);
      
      
      {
        std::vector<local_scalar_t__> r_time_flat__;
        current_statement__ = 82;
        r_time_flat__ = context__.vals_r("r_time");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
          current_statement__ = 82;
          assign(r_time, r_time_flat__[(pos__ - 1)],
            "assigning variable r_time", index_uni(sym1__));
          current_statement__ = 82;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 83;
      validate_non_negative_index("r_yobs", "r_n", r_n);
      current_statement__ = 84;
      context__.validate_dims("data initialization","r_yobs","double",
           std::vector<size_t>{static_cast<size_t>(r_n)});
      r_yobs__ = Eigen::Matrix<double, -1, 1>(r_n);
      new (&r_yobs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_yobs__.data(), r_n);
      
      
      {
        std::vector<local_scalar_t__> r_yobs_flat__;
        current_statement__ = 84;
        r_yobs_flat__ = context__.vals_r("r_yobs");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
          current_statement__ = 84;
          assign(r_yobs, r_yobs_flat__[(pos__ - 1)],
            "assigning variable r_yobs", index_uni(sym1__));
          current_statement__ = 84;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 85;
      validate_non_negative_index("r_is_male", "r_n_subjectids",
                                  r_n_subjectids);
      current_statement__ = 86;
      context__.validate_dims("data initialization","r_is_male","double",
           std::vector<size_t>{static_cast<size_t>(r_n_subjectids)});
      r_is_male__ = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      new (&r_is_male) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_is_male__.data(), r_n_subjectids);
      
      
      {
        std::vector<local_scalar_t__> r_is_male_flat__;
        current_statement__ = 86;
        r_is_male_flat__ = context__.vals_r("r_is_male");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
          current_statement__ = 86;
          assign(r_is_male, r_is_male_flat__[(pos__ - 1)],
            "assigning variable r_is_male", index_uni(sym1__));
          current_statement__ = 86;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 87;
      validate_non_negative_index("r_weight", "r_n_subjectids",
                                  r_n_subjectids);
      current_statement__ = 88;
      context__.validate_dims("data initialization","r_weight","double",
           std::vector<size_t>{static_cast<size_t>(r_n_subjectids)});
      r_weight__ = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      new (&r_weight) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_weight__.data(), r_n_subjectids);
      
      
      {
        std::vector<local_scalar_t__> r_weight_flat__;
        current_statement__ = 88;
        r_weight_flat__ = context__.vals_r("r_weight");
        current_statement__ = 88;
        pos__ = 1;
        current_statement__ = 88;
        for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
          current_statement__ = 88;
          assign(r_weight, r_weight_flat__[(pos__ - 1)],
            "assigning variable r_weight", index_uni(sym1__));
          current_statement__ = 88;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 89;
      validate_non_negative_index("r_creatinine", "r_n_subjectids",
                                  r_n_subjectids);
      current_statement__ = 90;
      context__.validate_dims("data initialization","r_creatinine","double",
           std::vector<size_t>{static_cast<size_t>(r_n_subjectids)});
      r_creatinine__ = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      new (&r_creatinine) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_creatinine__.data(), r_n_subjectids);
      
      
      {
        std::vector<local_scalar_t__> r_creatinine_flat__;
        current_statement__ = 90;
        r_creatinine_flat__ = context__.vals_r("r_creatinine");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
          current_statement__ = 90;
          assign(r_creatinine, r_creatinine_flat__[(pos__ - 1)],
            "assigning variable r_creatinine", index_uni(sym1__));
          current_statement__ = 90;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 91;
      validate_non_negative_index("r_age", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 92;
      context__.validate_dims("data initialization","r_age","double",
           std::vector<size_t>{static_cast<size_t>(r_n_subjectids)});
      r_age__ = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      new (&r_age) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_age__.data(), r_n_subjectids);
      
      
      {
        std::vector<local_scalar_t__> r_age_flat__;
        current_statement__ = 92;
        r_age_flat__ = context__.vals_r("r_age");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
          current_statement__ = 92;
          assign(r_age, r_age_flat__[(pos__ - 1)],
            "assigning variable r_age", index_uni(sym1__));
          current_statement__ = 92;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 93;
      validate_non_negative_index("r_D", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 94;
      context__.validate_dims("data initialization","r_D","double",
           std::vector<size_t>{static_cast<size_t>(r_n_subjectids)});
      r_D__ = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      new (&r_D) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_D__.data(), r_n_subjectids);
      
      
      {
        std::vector<local_scalar_t__> r_D_flat__;
        current_statement__ = 94;
        r_D_flat__ = context__.vals_r("r_D");
        current_statement__ = 94;
        pos__ = 1;
        current_statement__ = 94;
        for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
          current_statement__ = 94;
          assign(r_D, r_D_flat__[(pos__ - 1)],
            "assigning variable r_D", index_uni(sym1__));
          current_statement__ = 94;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 95;
      context__.validate_dims("data initialization","u_n","int",
           std::vector<size_t>{});
      u_n = std::numeric_limits<int>::min();
      
      current_statement__ = 95;
      u_n = context__.vals_i("u_n")[(1 - 1)];
      current_statement__ = 96;
      validate_non_negative_index("u_time", "u_n", u_n);
      current_statement__ = 97;
      context__.validate_dims("data initialization","u_time","double",
           std::vector<size_t>{static_cast<size_t>(u_n)});
      u_time__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_time) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_time__.data(), u_n);
      
      
      {
        std::vector<local_scalar_t__> u_time_flat__;
        current_statement__ = 97;
        u_time_flat__ = context__.vals_r("u_time");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
          current_statement__ = 97;
          assign(u_time, u_time_flat__[(pos__ - 1)],
            "assigning variable u_time", index_uni(sym1__));
          current_statement__ = 97;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 98;
      validate_non_negative_index("u_yobs", "u_n", u_n);
      current_statement__ = 99;
      context__.validate_dims("data initialization","u_yobs","double",
           std::vector<size_t>{static_cast<size_t>(u_n)});
      u_yobs__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_yobs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_yobs__.data(), u_n);
      
      
      {
        std::vector<local_scalar_t__> u_yobs_flat__;
        current_statement__ = 99;
        u_yobs_flat__ = context__.vals_r("u_yobs");
        current_statement__ = 99;
        pos__ = 1;
        current_statement__ = 99;
        for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
          current_statement__ = 99;
          assign(u_yobs, u_yobs_flat__[(pos__ - 1)],
            "assigning variable u_yobs", index_uni(sym1__));
          current_statement__ = 99;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 100;
      validate_non_negative_index("u_is_male", "u_n", u_n);
      current_statement__ = 101;
      context__.validate_dims("data initialization","u_is_male","double",
           std::vector<size_t>{static_cast<size_t>(u_n)});
      u_is_male__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_is_male) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_is_male__.data(), u_n);
      
      
      {
        std::vector<local_scalar_t__> u_is_male_flat__;
        current_statement__ = 101;
        u_is_male_flat__ = context__.vals_r("u_is_male");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
          current_statement__ = 101;
          assign(u_is_male, u_is_male_flat__[(pos__ - 1)],
            "assigning variable u_is_male", index_uni(sym1__));
          current_statement__ = 101;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 102;
      validate_non_negative_index("u_weight", "u_n", u_n);
      current_statement__ = 103;
      context__.validate_dims("data initialization","u_weight","double",
           std::vector<size_t>{static_cast<size_t>(u_n)});
      u_weight__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_weight) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_weight__.data(), u_n);
      
      
      {
        std::vector<local_scalar_t__> u_weight_flat__;
        current_statement__ = 103;
        u_weight_flat__ = context__.vals_r("u_weight");
        current_statement__ = 103;
        pos__ = 1;
        current_statement__ = 103;
        for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
          current_statement__ = 103;
          assign(u_weight, u_weight_flat__[(pos__ - 1)],
            "assigning variable u_weight", index_uni(sym1__));
          current_statement__ = 103;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 104;
      validate_non_negative_index("u_creatinine", "u_n", u_n);
      current_statement__ = 105;
      context__.validate_dims("data initialization","u_creatinine","double",
           std::vector<size_t>{static_cast<size_t>(u_n)});
      u_creatinine__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_creatinine) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_creatinine__.data(), u_n);
      
      
      {
        std::vector<local_scalar_t__> u_creatinine_flat__;
        current_statement__ = 105;
        u_creatinine_flat__ = context__.vals_r("u_creatinine");
        current_statement__ = 105;
        pos__ = 1;
        current_statement__ = 105;
        for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
          current_statement__ = 105;
          assign(u_creatinine, u_creatinine_flat__[(pos__ - 1)],
            "assigning variable u_creatinine", index_uni(sym1__));
          current_statement__ = 105;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 106;
      validate_non_negative_index("u_age", "u_n", u_n);
      current_statement__ = 107;
      context__.validate_dims("data initialization","u_age","double",
           std::vector<size_t>{static_cast<size_t>(u_n)});
      u_age__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_age) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_age__.data(), u_n);
      
      
      {
        std::vector<local_scalar_t__> u_age_flat__;
        current_statement__ = 107;
        u_age_flat__ = context__.vals_r("u_age");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
          current_statement__ = 107;
          assign(u_age, u_age_flat__[(pos__ - 1)],
            "assigning variable u_age", index_uni(sym1__));
          current_statement__ = 107;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 108;
      validate_non_negative_index("u_D", "u_n", u_n);
      current_statement__ = 109;
      context__.validate_dims("data initialization","u_D","double",
           std::vector<size_t>{static_cast<size_t>(u_n)});
      u_D__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_D) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_D__.data(), u_n);
      
      {
        std::vector<local_scalar_t__> u_D_flat__;
        current_statement__ = 109;
        u_D_flat__ = context__.vals_r("u_D");
        current_statement__ = 109;
        pos__ = 1;
        current_statement__ = 109;
        for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
          current_statement__ = 109;
          assign(u_D, u_D_flat__[(pos__ - 1)],
            "assigning variable u_D", index_uni(sym1__));
          current_statement__ = 109;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 110;
      validate_non_negative_index("u_amiodarone", "u_n", u_n);
      current_statement__ = 111;
      context__.validate_dims("data initialization","u_amiodarone","double",
           std::vector<size_t>{static_cast<size_t>(u_n)});
      u_amiodarone__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_amiodarone) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_amiodarone__.data(), u_n);
      
      
      {
        std::vector<local_scalar_t__> u_amiodarone_flat__;
        current_statement__ = 111;
        u_amiodarone_flat__ = context__.vals_r("u_amiodarone");
        current_statement__ = 111;
        pos__ = 1;
        current_statement__ = 111;
        for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
          current_statement__ = 111;
          assign(u_amiodarone, u_amiodarone_flat__[(pos__ - 1)],
            "assigning variable u_amiodarone", index_uni(sym1__));
          current_statement__ = 111;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 112;
      validate_non_negative_index("u_diltiazem", "u_n", u_n);
      current_statement__ = 113;
      context__.validate_dims("data initialization","u_diltiazem","double",
           std::vector<size_t>{static_cast<size_t>(u_n)});
      u_diltiazem__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_diltiazem) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_diltiazem__.data(), u_n);
      
      
      {
        std::vector<local_scalar_t__> u_diltiazem_flat__;
        current_statement__ = 113;
        u_diltiazem_flat__ = context__.vals_r("u_diltiazem");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
          current_statement__ = 113;
          assign(u_diltiazem, u_diltiazem_flat__[(pos__ - 1)],
            "assigning variable u_diltiazem", index_uni(sym1__));
          current_statement__ = 113;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 114;
      validate_non_negative_index("r_scaled_weight", "r_n_subjectids",
                                  r_n_subjectids);
      current_statement__ = 115;
      r_scaled_weight__ = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      new (&r_scaled_weight) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_scaled_weight__.data(), r_n_subjectids);
      stan::math::fill(r_scaled_weight, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 115;
      assign(r_scaled_weight,
        divide(subtract(r_weight, mean(r_weight)), sd(r_weight)),
        "assigning variable r_scaled_weight");
      current_statement__ = 116;
      validate_non_negative_index("r_scaled_age", "r_n_subjectids",
                                  r_n_subjectids);
      current_statement__ = 117;
      r_scaled_age__ = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      new (&r_scaled_age) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_scaled_age__.data(), r_n_subjectids);
      stan::math::fill(r_scaled_age, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 117;
      assign(r_scaled_age, divide(subtract(r_age, mean(r_age)), sd(r_age)),
        "assigning variable r_scaled_age");
      current_statement__ = 118;
      validate_non_negative_index("r_scaled_creatinine", "r_n_subjectids",
                                  r_n_subjectids);
      current_statement__ = 119;
      r_scaled_creatinine__ = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      new (&r_scaled_creatinine) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_scaled_creatinine__.data(), r_n_subjectids);
      stan::math::fill(r_scaled_creatinine, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 119;
      assign(r_scaled_creatinine,
        divide(subtract(r_creatinine, mean(r_creatinine)), sd(r_creatinine)),
        "assigning variable r_scaled_creatinine");
      current_statement__ = 120;
      validate_non_negative_index("X", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 121;
      X__ = Eigen::Matrix<double, -1, -1>(r_n_subjectids, 4);
      new (&X) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X__.data(), r_n_subjectids, 4);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 121;
      assign(X,
        transpose(stan::math::to_matrix(
          std::vector<Eigen::Matrix<double, 1, -1>>{transpose(r_is_male),
          transpose(r_scaled_weight), transpose(r_scaled_creatinine),
          transpose(r_scaled_age)})), "assigning variable X");
      current_statement__ = 122;
      validate_non_negative_index("r_yobs_scaled", "r_n", r_n);
      current_statement__ = 123;
      r_yobs_scaled__ = Eigen::Matrix<double, -1, 1>(r_n);
      new (&r_yobs_scaled) Eigen::Map<Eigen::Matrix<double, -1, 1>>(r_yobs_scaled__.data(), r_n);
      stan::math::fill(r_yobs_scaled, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 123;
      assign(r_yobs_scaled, divide(r_yobs, 1000),
        "assigning variable r_yobs_scaled");
      current_statement__ = 124;
      validate_non_negative_index("u_scaled_weight", "u_n", u_n);
      current_statement__ = 125;
      u_scaled_weight__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_scaled_weight) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_scaled_weight__.data(), u_n);
      stan::math::fill(u_scaled_weight, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 125;
      assign(u_scaled_weight,
        divide(subtract(u_weight, mean(r_weight)), sd(r_weight)),
        "assigning variable u_scaled_weight");
      current_statement__ = 126;
      validate_non_negative_index("u_scaled_age", "u_n", u_n);
      current_statement__ = 127;
      u_scaled_age__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_scaled_age) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_scaled_age__.data(), u_n);
      stan::math::fill(u_scaled_age, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 127;
      assign(u_scaled_age, divide(subtract(u_age, mean(r_age)), sd(r_age)),
        "assigning variable u_scaled_age");
      current_statement__ = 128;
      validate_non_negative_index("u_scaled_creatinine", "u_n", u_n);
      current_statement__ = 129;
      u_scaled_creatinine__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_scaled_creatinine) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_scaled_creatinine__.data(), u_n);
      stan::math::fill(u_scaled_creatinine, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 129;
      assign(u_scaled_creatinine,
        divide(subtract(u_creatinine, mean(r_creatinine)), sd(r_creatinine)),
        "assigning variable u_scaled_creatinine");
      current_statement__ = 130;
      validate_non_negative_index("u_yobs_scaled", "u_n", u_n);
      current_statement__ = 131;
      u_yobs_scaled__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_yobs_scaled) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_yobs_scaled__.data(), u_n);
      stan::math::fill(u_yobs_scaled, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 131;
      assign(u_yobs_scaled, divide(u_yobs, 1000),
        "assigning variable u_yobs_scaled");
      current_statement__ = 132;
      validate_non_negative_index("u_X", "u_n", u_n);
      current_statement__ = 133;
      u_X__ = Eigen::Matrix<double, -1, -1>(u_n, 4);
      new (&u_X) Eigen::Map<Eigen::Matrix<double, -1, -1>>(u_X__.data(), u_n, 4);
      stan::math::fill(u_X, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 133;
      assign(u_X,
        transpose(stan::math::to_matrix(
          std::vector<Eigen::Matrix<double, 1, -1>>{transpose(u_is_male),
          transpose(u_scaled_weight), transpose(u_scaled_creatinine),
          transpose(u_scaled_age)})), "assigning variable u_X");
      current_statement__ = 134;
      validate_non_negative_index("u_amiodarone_scaled", "u_n", u_n);
      current_statement__ = 135;
      u_amiodarone_scaled__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_amiodarone_scaled) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_amiodarone_scaled__.data(), u_n);
      stan::math::fill(u_amiodarone_scaled, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 135;
      assign(u_amiodarone_scaled, divide(u_amiodarone, max(u_amiodarone)),
        "assigning variable u_amiodarone_scaled");
      current_statement__ = 136;
      validate_non_negative_index("u_diltiazem_scaled", "u_n", u_n);
      current_statement__ = 137;
      u_diltiazem_scaled__ = Eigen::Matrix<double, -1, 1>(u_n);
      new (&u_diltiazem_scaled) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u_diltiazem_scaled__.data(), u_n);
      stan::math::fill(u_diltiazem_scaled, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 137;
      assign(u_diltiazem_scaled, divide(u_diltiazem, max(u_diltiazem)),
        "assigning variable u_diltiazem_scaled");
      current_statement__ = 138;
      tpred__ = Eigen::Matrix<double, -1, 1>(24);
      new (&tpred) Eigen::Map<Eigen::Matrix<double, -1, 1>>(tpred__.data(), 24);
      stan::math::fill(tpred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 139;
      validate_non_negative_index("z_cl", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 140;
      validate_non_negative_index("z_t", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 141;
      validate_non_negative_index("delays", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 142;
      validate_non_negative_index("z_alpha", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 143;
      validate_non_negative_index("r_Cl", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 144;
      validate_non_negative_index("r_tmax", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 145;
      validate_non_negative_index("r_alpha", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 146;
      validate_non_negative_index("r_ka", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 147;
      validate_non_negative_index("r_ke", "r_n_subjectids", r_n_subjectids);
      current_statement__ = 148;
      validate_non_negative_index("delayed_time", "r_n", r_n);
      current_statement__ = 149;
      validate_non_negative_index("r_C", "r_n", r_n);
      current_statement__ = 150;
      validate_non_negative_index("u_Cl", "u_n", u_n);
      current_statement__ = 151;
      validate_non_negative_index("u_tmax", "u_n", u_n);
      current_statement__ = 152;
      validate_non_negative_index("u_alpha", "u_n", u_n);
      current_statement__ = 153;
      validate_non_negative_index("u_ka", "u_n", u_n);
      current_statement__ = 154;
      validate_non_negative_index("u_ke", "u_n", u_n);
      current_statement__ = 155;
      validate_non_negative_index("u_F", "u_n", u_n);
      current_statement__ = 156;
      validate_non_negative_index("u_C", "u_n", u_n);
      current_statement__ = 157;
      validate_non_negative_index("u_C0", "u_n", u_n);
      current_statement__ = 158;
      validate_non_negative_index("r_yppc", "r_n", r_n);
      current_statement__ = 159;
      validate_non_negative_index("u_yppc", "u_n", u_n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + r_n_subjectids + 1 + 1 + r_n_subjectids + 
      1 + 1 + r_n_subjectids + 1 + 1 + 1 + 1 + r_n_subjectids + 1 + 1 + 
      1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "_008_combined_data_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu_cl;
      mu_cl = DUMMY_VAR__;
      
      current_statement__ = 1;
      mu_cl = in__.template read<local_scalar_t__>();
      local_scalar_t__ s_cl;
      s_cl = DUMMY_VAR__;
      
      current_statement__ = 2;
      s_cl = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_cl;
      z_cl = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(z_cl, DUMMY_VAR__);
      
      current_statement__ = 3;
      z_cl = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
               r_n_subjectids);
      local_scalar_t__ mu_tmax;
      mu_tmax = DUMMY_VAR__;
      
      current_statement__ = 4;
      mu_tmax = in__.template read<local_scalar_t__>();
      local_scalar_t__ s_t;
      s_t = DUMMY_VAR__;
      
      current_statement__ = 5;
      s_t = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_t;
      z_t = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(z_t, DUMMY_VAR__);
      
      current_statement__ = 6;
      z_t = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
              r_n_subjectids);
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      current_statement__ = 7;
      phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      local_scalar_t__ kappa;
      kappa = DUMMY_VAR__;
      
      current_statement__ = 8;
      kappa = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> delays;
      delays = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(delays, DUMMY_VAR__);
      
      current_statement__ = 9;
      delays = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                 0, 1, lp__, r_n_subjectids);
      local_scalar_t__ r_sigma;
      r_sigma = DUMMY_VAR__;
      
      current_statement__ = 10;
      r_sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      local_scalar_t__ u_sigma;
      u_sigma = DUMMY_VAR__;
      
      current_statement__ = 11;
      u_sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      local_scalar_t__ mu_alpha;
      mu_alpha = DUMMY_VAR__;
      
      current_statement__ = 12;
      mu_alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ s_alpha;
      s_alpha = DUMMY_VAR__;
      
      current_statement__ = 13;
      s_alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_alpha;
      z_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(z_alpha, DUMMY_VAR__);
      
      current_statement__ = 14;
      z_alpha = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  r_n_subjectids);
      local_scalar_t__ mu_F;
      mu_F = DUMMY_VAR__;
      
      current_statement__ = 15;
      mu_F = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_cl_age;
      b_cl_age = DUMMY_VAR__;
      
      current_statement__ = 16;
      b_cl_age = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_cl_weight;
      b_cl_weight = DUMMY_VAR__;
      
      current_statement__ = 17;
      b_cl_weight = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_cl_is_male;
      b_cl_is_male = DUMMY_VAR__;
      
      current_statement__ = 18;
      b_cl_is_male = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_cl_creatinine;
      b_cl_creatinine = DUMMY_VAR__;
      
      current_statement__ = 19;
      b_cl_creatinine = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_t_age;
      b_t_age = DUMMY_VAR__;
      
      current_statement__ = 20;
      b_t_age = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_t_weight;
      b_t_weight = DUMMY_VAR__;
      
      current_statement__ = 21;
      b_t_weight = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_t_is_male;
      b_t_is_male = DUMMY_VAR__;
      
      current_statement__ = 22;
      b_t_is_male = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_t_creatinine;
      b_t_creatinine = DUMMY_VAR__;
      
      current_statement__ = 23;
      b_t_creatinine = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_a_creatinine;
      b_a_creatinine = DUMMY_VAR__;
      
      current_statement__ = 24;
      b_a_creatinine = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_F_amio;
      b_F_amio = DUMMY_VAR__;
      
      current_statement__ = 25;
      b_F_amio = in__.template read<local_scalar_t__>();
      local_scalar_t__ tau_F;
      tau_F = DUMMY_VAR__;
      
      current_statement__ = 26;
      tau_F = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> r_Cl;
      r_Cl = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(r_Cl, DUMMY_VAR__);
      
      current_statement__ = 27;
      assign(r_Cl,
        stan::math::exp(
          add(
            add(
              add(
                add(add(mu_cl, multiply(z_cl, s_cl)),
                  multiply(b_cl_age, r_scaled_age)),
                multiply(b_cl_weight, r_scaled_weight)),
              multiply(b_cl_is_male, r_is_male)),
            multiply(b_cl_creatinine, r_scaled_creatinine))),
        "assigning variable r_Cl");
      Eigen::Matrix<local_scalar_t__, -1, 1> r_tmax;
      r_tmax = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(r_tmax, DUMMY_VAR__);
      
      current_statement__ = 28;
      assign(r_tmax,
        stan::math::exp(
          add(
            add(
              add(
                add(add(mu_tmax, multiply(z_t, s_t)),
                  multiply(b_t_age, r_scaled_age)),
                multiply(b_t_weight, r_scaled_weight)),
              multiply(b_t_is_male, r_is_male)),
            multiply(b_t_creatinine, r_scaled_creatinine))),
        "assigning variable r_tmax");
      Eigen::Matrix<local_scalar_t__, -1, 1> r_alpha;
      r_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(r_alpha, DUMMY_VAR__);
      
      current_statement__ = 29;
      assign(r_alpha,
        inv_logit(
          add(add(mu_alpha, multiply(z_alpha, s_alpha)),
            multiply(b_a_creatinine, r_scaled_creatinine))),
        "assigning variable r_alpha");
      Eigen::Matrix<local_scalar_t__, -1, 1> r_ka;
      r_ka = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(r_ka, DUMMY_VAR__);
      
      current_statement__ = 30;
      assign(r_ka,
        elt_divide(stan::math::log(r_alpha),
          elt_multiply(r_tmax, subtract(r_alpha, 1))),
        "assigning variable r_ka");
      Eigen::Matrix<local_scalar_t__, -1, 1> r_ke;
      r_ke = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(r_ke, DUMMY_VAR__);
      
      current_statement__ = 31;
      assign(r_ke,
        elt_divide(elt_multiply(r_alpha, stan::math::log(r_alpha)),
          elt_multiply(r_tmax, subtract(r_alpha, 1))),
        "assigning variable r_ke");
      Eigen::Matrix<local_scalar_t__, -1, 1> delayed_time;
      delayed_time = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n);
      stan::math::fill(delayed_time, DUMMY_VAR__);
      
      current_statement__ = 32;
      assign(delayed_time,
        subtract(r_time,
          multiply(0.5, rvalue(delays, "delays", index_multi(r_subjectids)))),
        "assigning variable delayed_time");
      local_scalar_t__ r_F;
      r_F = DUMMY_VAR__;
      
      current_statement__ = 33;
      r_F = inv_logit(mu_F);
      Eigen::Matrix<local_scalar_t__, -1, 1> r_C;
      r_C = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n);
      stan::math::fill(r_C, DUMMY_VAR__);
      
      current_statement__ = 34;
      assign(r_C,
        concentration(delayed_time,
          rvalue(r_D, "r_D", index_multi(r_subjectids)),
          rep_vector(r_F, r_n),
          rvalue(r_Cl, "r_Cl", index_multi(r_subjectids)),
          rvalue(r_ka, "r_ka", index_multi(r_subjectids)),
          rvalue(r_ke, "r_ke", index_multi(r_subjectids)), pstream__),
        "assigning variable r_C");
      Eigen::Matrix<local_scalar_t__, -1, 1> u_Cl;
      u_Cl = Eigen::Matrix<local_scalar_t__, -1, 1>(u_n);
      stan::math::fill(u_Cl, DUMMY_VAR__);
      
      current_statement__ = 35;
      assign(u_Cl,
        stan::math::exp(
          add(
            add(
              add(add(mu_cl, multiply(b_cl_age, u_scaled_age)),
                multiply(b_cl_weight, u_scaled_weight)),
              multiply(b_cl_is_male, u_is_male)),
            multiply(b_cl_creatinine, u_scaled_creatinine))),
        "assigning variable u_Cl");
      Eigen::Matrix<local_scalar_t__, -1, 1> u_tmax;
      u_tmax = Eigen::Matrix<local_scalar_t__, -1, 1>(u_n);
      stan::math::fill(u_tmax, DUMMY_VAR__);
      
      current_statement__ = 36;
      assign(u_tmax,
        stan::math::exp(
          add(
            add(
              add(add(mu_tmax, multiply(b_t_age, u_scaled_age)),
                multiply(b_t_weight, u_scaled_weight)),
              multiply(b_t_is_male, u_is_male)),
            multiply(b_t_creatinine, u_scaled_creatinine))),
        "assigning variable u_tmax");
      Eigen::Matrix<local_scalar_t__, -1, 1> u_alpha;
      u_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(u_n);
      stan::math::fill(u_alpha, DUMMY_VAR__);
      
      current_statement__ = 37;
      assign(u_alpha,
        inv_logit(
          add(mu_alpha, multiply(b_a_creatinine, u_scaled_creatinine))),
        "assigning variable u_alpha");
      Eigen::Matrix<local_scalar_t__, -1, 1> u_ka;
      u_ka = Eigen::Matrix<local_scalar_t__, -1, 1>(u_n);
      stan::math::fill(u_ka, DUMMY_VAR__);
      
      current_statement__ = 38;
      assign(u_ka,
        elt_divide(stan::math::log(u_alpha),
          elt_multiply(u_tmax, subtract(u_alpha, 1))),
        "assigning variable u_ka");
      Eigen::Matrix<local_scalar_t__, -1, 1> u_ke;
      u_ke = Eigen::Matrix<local_scalar_t__, -1, 1>(u_n);
      stan::math::fill(u_ke, DUMMY_VAR__);
      
      current_statement__ = 39;
      assign(u_ke, elt_multiply(u_alpha, u_ka), "assigning variable u_ke");
      Eigen::Matrix<local_scalar_t__, -1, 1> u_F;
      u_F = Eigen::Matrix<local_scalar_t__, -1, 1>(u_n);
      stan::math::fill(u_F, DUMMY_VAR__);
      
      current_statement__ = 40;
      assign(u_F,
        inv_logit(add(mu_F, multiply(b_F_amio, u_amiodarone_scaled))),
        "assigning variable u_F");
      Eigen::Matrix<local_scalar_t__, -1, 1> u_C;
      u_C = Eigen::Matrix<local_scalar_t__, -1, 1>(u_n);
      stan::math::fill(u_C, DUMMY_VAR__);
      
      current_statement__ = 41;
      assign(u_C, rep_vector(0.0, u_n), "assigning variable u_C");
      Eigen::Matrix<local_scalar_t__, -1, 1> u_C0;
      u_C0 = Eigen::Matrix<local_scalar_t__, -1, 1>(u_n);
      stan::math::fill(u_C0, DUMMY_VAR__);
      
      current_statement__ = 42;
      assign(u_C0, rep_vector(0.0, u_n), "assigning variable u_C0");
      current_statement__ = 45;
      for (int i = 1; i <= 14; ++i) {
        current_statement__ = 43;
        assign(u_C0,
          add(stan::model::deep_copy(u_C0),
            concentration(rep_vector((12 * i), u_n), u_D, u_F, u_Cl, u_ka,
              u_ke, pstream__)), "assigning variable u_C0");
      }
      current_statement__ = 46;
      assign(u_C,
        add(u_C0,
          concentration(u_time, u_D, u_F, u_Cl, u_ka, u_ke, pstream__)),
        "assigning variable u_C");
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 27;
        check_greater_or_equal(function__, "r_Cl[sym1__]",
                               r_Cl[(sym1__ - 1)], 0);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 28;
        check_greater_or_equal(function__, "r_tmax[sym1__]",
                               r_tmax[(sym1__ - 1)], 0);
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 29;
        check_greater_or_equal(function__, "r_alpha[sym1__]",
                               r_alpha[(sym1__ - 1)], 0);
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 29;
        check_less_or_equal(function__, "r_alpha[sym1__]",
                            r_alpha[(sym1__ - 1)], 1);
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 30;
        check_greater_or_equal(function__, "r_ka[sym1__]",
                               r_ka[(sym1__ - 1)], 0);
      }
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 31;
        check_greater_or_equal(function__, "r_ke[sym1__]",
                               r_ke[(sym1__ - 1)], 0);
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
        current_statement__ = 32;
        check_greater_or_equal(function__, "delayed_time[sym1__]",
                               delayed_time[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      check_greater_or_equal(function__, "r_F", r_F, 0);
      current_statement__ = 33;
      check_less_or_equal(function__, "r_F", r_F, 1);
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
        current_statement__ = 34;
        check_greater_or_equal(function__, "r_C[sym1__]", r_C[(sym1__ - 1)],
                               0);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 35;
        check_greater_or_equal(function__, "u_Cl[sym1__]",
                               u_Cl[(sym1__ - 1)], 0);
      }
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 36;
        check_greater_or_equal(function__, "u_tmax[sym1__]",
                               u_tmax[(sym1__ - 1)], 0);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 37;
        check_greater_or_equal(function__, "u_alpha[sym1__]",
                               u_alpha[(sym1__ - 1)], 0);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 37;
        check_less_or_equal(function__, "u_alpha[sym1__]",
                            u_alpha[(sym1__ - 1)], 1);
      }
      current_statement__ = 38;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 38;
        check_greater_or_equal(function__, "u_ka[sym1__]",
                               u_ka[(sym1__ - 1)], 0);
      }
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 39;
        check_greater_or_equal(function__, "u_ke[sym1__]",
                               u_ke[(sym1__ - 1)], 0);
      }
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 40;
        check_greater_or_equal(function__, "u_F[sym1__]", u_F[(sym1__ - 1)],
                               0);
      }
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 40;
        check_less_or_equal(function__, "u_F[sym1__]", u_F[(sym1__ - 1)], 1);
      }
      current_statement__ = 41;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 41;
        check_greater_or_equal(function__, "u_C[sym1__]", u_C[(sym1__ - 1)],
                               0);
      }
      current_statement__ = 42;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 42;
        check_greater_or_equal(function__, "u_C0[sym1__]",
                               u_C0[(sym1__ - 1)], 0);
      }
      {
        current_statement__ = 49;
        lp_accum__.add(
          normal_lpdf<propto__>(mu_tmax, stan::math::log(3.3), 0.1));
        current_statement__ = 50;
        lp_accum__.add(gamma_lpdf<propto__>(s_t, 5, 100));
        current_statement__ = 51;
        lp_accum__.add(std_normal_lpdf<propto__>(z_t));
        current_statement__ = 52;
        lp_accum__.add(
          normal_lpdf<propto__>(mu_cl, stan::math::log(3.3), 0.15));
        current_statement__ = 53;
        lp_accum__.add(gamma_lpdf<propto__>(s_cl, 15, 100));
        current_statement__ = 54;
        lp_accum__.add(std_normal_lpdf<propto__>(z_cl));
        current_statement__ = 55;
        lp_accum__.add(normal_lpdf<propto__>(mu_alpha, -0.25, 0.5));
        current_statement__ = 56;
        lp_accum__.add(gamma_lpdf<propto__>(s_alpha, 10, 100));
        current_statement__ = 57;
        lp_accum__.add(normal_lpdf<propto__>(z_alpha, 0, 1));
        current_statement__ = 58;
        lp_accum__.add(normal_lpdf<propto__>(mu_F, 0, 0.025));
        current_statement__ = 59;
        lp_accum__.add(beta_lpdf<propto__>(phi, 20, 20));
        current_statement__ = 60;
        lp_accum__.add(beta_lpdf<propto__>(kappa, 20, 20));
        current_statement__ = 61;
        lp_accum__.add(
          beta_lpdf<propto__>(delays, (phi / kappa), ((1 - phi) / kappa)));
        current_statement__ = 62;
        lp_accum__.add(normal_lpdf<propto__>(b_cl_age, 0, 0.25));
        current_statement__ = 63;
        lp_accum__.add(normal_lpdf<propto__>(b_cl_weight, 0, 0.25));
        current_statement__ = 64;
        lp_accum__.add(normal_lpdf<propto__>(b_cl_is_male, 0, 0.25));
        current_statement__ = 65;
        lp_accum__.add(normal_lpdf<propto__>(b_cl_creatinine, 0, 0.25));
        current_statement__ = 66;
        lp_accum__.add(normal_lpdf<propto__>(b_t_age, 0, 0.25));
        current_statement__ = 67;
        lp_accum__.add(normal_lpdf<propto__>(b_t_weight, 0, 0.25));
        current_statement__ = 68;
        lp_accum__.add(normal_lpdf<propto__>(b_t_is_male, 0, 0.25));
        current_statement__ = 69;
        lp_accum__.add(normal_lpdf<propto__>(b_t_creatinine, 0, 0.25));
        current_statement__ = 70;
        lp_accum__.add(normal_lpdf<propto__>(b_a_creatinine, 0, 0.25));
        current_statement__ = 71;
        lp_accum__.add(double_exponential_lpdf<propto__>(b_F_amio, 0, tau_F));
        current_statement__ = 72;
        lp_accum__.add(normal_lpdf<propto__>(tau_F, 0, 0.25));
        current_statement__ = 73;
        lp_accum__.add(
          lognormal_lpdf<propto__>(r_sigma, stan::math::log(0.1), 0.2));
        current_statement__ = 74;
        lp_accum__.add(
          lognormal_lpdf<propto__>(u_sigma, stan::math::log(0.1), 0.2));
        current_statement__ = 75;
        lp_accum__.add(
          lognormal_lpdf<propto__>(r_yobs_scaled, stan::math::log(r_C),
            r_sigma));
        current_statement__ = 76;
        lp_accum__.add(
          lognormal_lpdf<propto__>(u_yobs_scaled, stan::math::log(u_C),
            u_sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "_008_combined_data_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu_cl;
      mu_cl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu_cl = in__.template read<local_scalar_t__>();
      double s_cl;
      s_cl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      s_cl = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<double, -1, 1> z_cl;
      z_cl = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      stan::math::fill(z_cl, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      z_cl = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
               r_n_subjectids);
      double mu_tmax;
      mu_tmax = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu_tmax = in__.template read<local_scalar_t__>();
      double s_t;
      s_t = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      s_t = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double, -1, 1> z_t;
      z_t = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      stan::math::fill(z_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      z_t = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
              r_n_subjectids);
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      double kappa;
      kappa = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      kappa = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 1, lp__);
      Eigen::Matrix<double, -1, 1> delays;
      delays = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      stan::math::fill(delays, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      delays = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                 0, 1, lp__, r_n_subjectids);
      double r_sigma;
      r_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      r_sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      double u_sigma;
      u_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      u_sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      double mu_alpha;
      mu_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      mu_alpha = in__.template read<local_scalar_t__>();
      double s_alpha;
      s_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      s_alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<double, -1, 1> z_alpha;
      z_alpha = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      stan::math::fill(z_alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      z_alpha = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  r_n_subjectids);
      double mu_F;
      mu_F = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      mu_F = in__.template read<local_scalar_t__>();
      double b_cl_age;
      b_cl_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      b_cl_age = in__.template read<local_scalar_t__>();
      double b_cl_weight;
      b_cl_weight = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      b_cl_weight = in__.template read<local_scalar_t__>();
      double b_cl_is_male;
      b_cl_is_male = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      b_cl_is_male = in__.template read<local_scalar_t__>();
      double b_cl_creatinine;
      b_cl_creatinine = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      b_cl_creatinine = in__.template read<local_scalar_t__>();
      double b_t_age;
      b_t_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      b_t_age = in__.template read<local_scalar_t__>();
      double b_t_weight;
      b_t_weight = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      b_t_weight = in__.template read<local_scalar_t__>();
      double b_t_is_male;
      b_t_is_male = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      b_t_is_male = in__.template read<local_scalar_t__>();
      double b_t_creatinine;
      b_t_creatinine = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 23;
      b_t_creatinine = in__.template read<local_scalar_t__>();
      double b_a_creatinine;
      b_a_creatinine = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 24;
      b_a_creatinine = in__.template read<local_scalar_t__>();
      double b_F_amio;
      b_F_amio = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 25;
      b_F_amio = in__.template read<local_scalar_t__>();
      double tau_F;
      tau_F = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 26;
      tau_F = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> r_Cl;
      r_Cl = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      stan::math::fill(r_Cl, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> r_tmax;
      r_tmax = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      stan::math::fill(r_tmax, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> r_alpha;
      r_alpha = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      stan::math::fill(r_alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> r_ka;
      r_ka = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      stan::math::fill(r_ka, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> r_ke;
      r_ke = Eigen::Matrix<double, -1, 1>(r_n_subjectids);
      stan::math::fill(r_ke, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> delayed_time;
      delayed_time = Eigen::Matrix<double, -1, 1>(r_n);
      stan::math::fill(delayed_time, std::numeric_limits<double>::quiet_NaN());
      
      
      double r_F;
      r_F = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> r_C;
      r_C = Eigen::Matrix<double, -1, 1>(r_n);
      stan::math::fill(r_C, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> u_Cl;
      u_Cl = Eigen::Matrix<double, -1, 1>(u_n);
      stan::math::fill(u_Cl, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> u_tmax;
      u_tmax = Eigen::Matrix<double, -1, 1>(u_n);
      stan::math::fill(u_tmax, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> u_alpha;
      u_alpha = Eigen::Matrix<double, -1, 1>(u_n);
      stan::math::fill(u_alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> u_ka;
      u_ka = Eigen::Matrix<double, -1, 1>(u_n);
      stan::math::fill(u_ka, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> u_ke;
      u_ke = Eigen::Matrix<double, -1, 1>(u_n);
      stan::math::fill(u_ke, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> u_F;
      u_F = Eigen::Matrix<double, -1, 1>(u_n);
      stan::math::fill(u_F, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> u_C;
      u_C = Eigen::Matrix<double, -1, 1>(u_n);
      stan::math::fill(u_C, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> u_C0;
      u_C0 = Eigen::Matrix<double, -1, 1>(u_n);
      stan::math::fill(u_C0, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(mu_cl);
      out__.write(s_cl);
      out__.write(z_cl);
      out__.write(mu_tmax);
      out__.write(s_t);
      out__.write(z_t);
      out__.write(phi);
      out__.write(kappa);
      out__.write(delays);
      out__.write(r_sigma);
      out__.write(u_sigma);
      out__.write(mu_alpha);
      out__.write(s_alpha);
      out__.write(z_alpha);
      out__.write(mu_F);
      out__.write(b_cl_age);
      out__.write(b_cl_weight);
      out__.write(b_cl_is_male);
      out__.write(b_cl_creatinine);
      out__.write(b_t_age);
      out__.write(b_t_weight);
      out__.write(b_t_is_male);
      out__.write(b_t_creatinine);
      out__.write(b_a_creatinine);
      out__.write(b_F_amio);
      out__.write(tau_F);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 27;
      assign(r_Cl,
        stan::math::exp(
          add(
            add(
              add(
                add(add(mu_cl, multiply(z_cl, s_cl)),
                  multiply(b_cl_age, r_scaled_age)),
                multiply(b_cl_weight, r_scaled_weight)),
              multiply(b_cl_is_male, r_is_male)),
            multiply(b_cl_creatinine, r_scaled_creatinine))),
        "assigning variable r_Cl");
      current_statement__ = 28;
      assign(r_tmax,
        stan::math::exp(
          add(
            add(
              add(
                add(add(mu_tmax, multiply(z_t, s_t)),
                  multiply(b_t_age, r_scaled_age)),
                multiply(b_t_weight, r_scaled_weight)),
              multiply(b_t_is_male, r_is_male)),
            multiply(b_t_creatinine, r_scaled_creatinine))),
        "assigning variable r_tmax");
      current_statement__ = 29;
      assign(r_alpha,
        inv_logit(
          add(add(mu_alpha, multiply(z_alpha, s_alpha)),
            multiply(b_a_creatinine, r_scaled_creatinine))),
        "assigning variable r_alpha");
      current_statement__ = 30;
      assign(r_ka,
        elt_divide(stan::math::log(r_alpha),
          elt_multiply(r_tmax, subtract(r_alpha, 1))),
        "assigning variable r_ka");
      current_statement__ = 31;
      assign(r_ke,
        elt_divide(elt_multiply(r_alpha, stan::math::log(r_alpha)),
          elt_multiply(r_tmax, subtract(r_alpha, 1))),
        "assigning variable r_ke");
      current_statement__ = 32;
      assign(delayed_time,
        subtract(r_time,
          multiply(0.5, rvalue(delays, "delays", index_multi(r_subjectids)))),
        "assigning variable delayed_time");
      current_statement__ = 33;
      r_F = inv_logit(mu_F);
      current_statement__ = 34;
      assign(r_C,
        concentration(delayed_time,
          rvalue(r_D, "r_D", index_multi(r_subjectids)),
          rep_vector(r_F, r_n),
          rvalue(r_Cl, "r_Cl", index_multi(r_subjectids)),
          rvalue(r_ka, "r_ka", index_multi(r_subjectids)),
          rvalue(r_ke, "r_ke", index_multi(r_subjectids)), pstream__),
        "assigning variable r_C");
      current_statement__ = 35;
      assign(u_Cl,
        stan::math::exp(
          add(
            add(
              add(add(mu_cl, multiply(b_cl_age, u_scaled_age)),
                multiply(b_cl_weight, u_scaled_weight)),
              multiply(b_cl_is_male, u_is_male)),
            multiply(b_cl_creatinine, u_scaled_creatinine))),
        "assigning variable u_Cl");
      current_statement__ = 36;
      assign(u_tmax,
        stan::math::exp(
          add(
            add(
              add(add(mu_tmax, multiply(b_t_age, u_scaled_age)),
                multiply(b_t_weight, u_scaled_weight)),
              multiply(b_t_is_male, u_is_male)),
            multiply(b_t_creatinine, u_scaled_creatinine))),
        "assigning variable u_tmax");
      current_statement__ = 37;
      assign(u_alpha,
        inv_logit(
          add(mu_alpha, multiply(b_a_creatinine, u_scaled_creatinine))),
        "assigning variable u_alpha");
      current_statement__ = 38;
      assign(u_ka,
        elt_divide(stan::math::log(u_alpha),
          elt_multiply(u_tmax, subtract(u_alpha, 1))),
        "assigning variable u_ka");
      current_statement__ = 39;
      assign(u_ke, elt_multiply(u_alpha, u_ka), "assigning variable u_ke");
      current_statement__ = 40;
      assign(u_F,
        inv_logit(add(mu_F, multiply(b_F_amio, u_amiodarone_scaled))),
        "assigning variable u_F");
      current_statement__ = 41;
      assign(u_C, rep_vector(0.0, u_n), "assigning variable u_C");
      current_statement__ = 42;
      assign(u_C0, rep_vector(0.0, u_n), "assigning variable u_C0");
      current_statement__ = 45;
      for (int i = 1; i <= 14; ++i) {
        current_statement__ = 43;
        assign(u_C0,
          add(stan::model::deep_copy(u_C0),
            concentration(rep_vector((12 * i), u_n), u_D, u_F, u_Cl, u_ka,
              u_ke, pstream__)), "assigning variable u_C0");
      }
      current_statement__ = 46;
      assign(u_C,
        add(u_C0,
          concentration(u_time, u_D, u_F, u_Cl, u_ka, u_ke, pstream__)),
        "assigning variable u_C");
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 27;
        check_greater_or_equal(function__, "r_Cl[sym1__]",
                               r_Cl[(sym1__ - 1)], 0);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 28;
        check_greater_or_equal(function__, "r_tmax[sym1__]",
                               r_tmax[(sym1__ - 1)], 0);
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 29;
        check_greater_or_equal(function__, "r_alpha[sym1__]",
                               r_alpha[(sym1__ - 1)], 0);
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 29;
        check_less_or_equal(function__, "r_alpha[sym1__]",
                            r_alpha[(sym1__ - 1)], 1);
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 30;
        check_greater_or_equal(function__, "r_ka[sym1__]",
                               r_ka[(sym1__ - 1)], 0);
      }
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        current_statement__ = 31;
        check_greater_or_equal(function__, "r_ke[sym1__]",
                               r_ke[(sym1__ - 1)], 0);
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
        current_statement__ = 32;
        check_greater_or_equal(function__, "delayed_time[sym1__]",
                               delayed_time[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      check_greater_or_equal(function__, "r_F", r_F, 0);
      current_statement__ = 33;
      check_less_or_equal(function__, "r_F", r_F, 1);
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
        current_statement__ = 34;
        check_greater_or_equal(function__, "r_C[sym1__]", r_C[(sym1__ - 1)],
                               0);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 35;
        check_greater_or_equal(function__, "u_Cl[sym1__]",
                               u_Cl[(sym1__ - 1)], 0);
      }
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 36;
        check_greater_or_equal(function__, "u_tmax[sym1__]",
                               u_tmax[(sym1__ - 1)], 0);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 37;
        check_greater_or_equal(function__, "u_alpha[sym1__]",
                               u_alpha[(sym1__ - 1)], 0);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 37;
        check_less_or_equal(function__, "u_alpha[sym1__]",
                            u_alpha[(sym1__ - 1)], 1);
      }
      current_statement__ = 38;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 38;
        check_greater_or_equal(function__, "u_ka[sym1__]",
                               u_ka[(sym1__ - 1)], 0);
      }
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 39;
        check_greater_or_equal(function__, "u_ke[sym1__]",
                               u_ke[(sym1__ - 1)], 0);
      }
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 40;
        check_greater_or_equal(function__, "u_F[sym1__]", u_F[(sym1__ - 1)],
                               0);
      }
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 40;
        check_less_or_equal(function__, "u_F[sym1__]", u_F[(sym1__ - 1)], 1);
      }
      current_statement__ = 41;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 41;
        check_greater_or_equal(function__, "u_C[sym1__]", u_C[(sym1__ - 1)],
                               0);
      }
      current_statement__ = 42;
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        current_statement__ = 42;
        check_greater_or_equal(function__, "u_C0[sym1__]",
                               u_C0[(sym1__ - 1)], 0);
      }
      if (emit_transformed_parameters__) {
        out__.write(r_Cl);
        out__.write(r_tmax);
        out__.write(r_alpha);
        out__.write(r_ka);
        out__.write(r_ke);
        out__.write(delayed_time);
        out__.write(r_F);
        out__.write(r_C);
        out__.write(u_Cl);
        out__.write(u_tmax);
        out__.write(u_alpha);
        out__.write(u_ka);
        out__.write(u_ke);
        out__.write(u_F);
        out__.write(u_C);
        out__.write(u_C0);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> r_yppc;
      r_yppc = std::vector<double>(r_n, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 47;
      assign(r_yppc,
        lognormal_rng(stan::math::log(r_C), r_sigma, base_rng__),
        "assigning variable r_yppc");
      std::vector<double> u_yppc;
      u_yppc = std::vector<double>(u_n, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 48;
      assign(u_yppc,
        lognormal_rng(stan::math::log(u_C), u_sigma, base_rng__),
        "assigning variable u_yppc");
      out__.write(r_yppc);
      out__.write(u_yppc);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ mu_cl;
      mu_cl = DUMMY_VAR__;
      
      mu_cl = in__.read<local_scalar_t__>();
      out__.write(mu_cl);
      local_scalar_t__ s_cl;
      s_cl = DUMMY_VAR__;
      
      s_cl = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_cl);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_cl;
      z_cl = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(z_cl, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        assign(z_cl, in__.read<local_scalar_t__>(),
          "assigning variable z_cl", index_uni(sym1__));
      }
      out__.write(z_cl);
      local_scalar_t__ mu_tmax;
      mu_tmax = DUMMY_VAR__;
      
      mu_tmax = in__.read<local_scalar_t__>();
      out__.write(mu_tmax);
      local_scalar_t__ s_t;
      s_t = DUMMY_VAR__;
      
      s_t = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_t);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_t;
      z_t = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(z_t, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        assign(z_t, in__.read<local_scalar_t__>(),
          "assigning variable z_t", index_uni(sym1__));
      }
      out__.write(z_t);
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      phi = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, phi);
      local_scalar_t__ kappa;
      kappa = DUMMY_VAR__;
      
      kappa = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, kappa);
      Eigen::Matrix<local_scalar_t__, -1, 1> delays;
      delays = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(delays, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        assign(delays, in__.read<local_scalar_t__>(),
          "assigning variable delays", index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, delays);
      local_scalar_t__ r_sigma;
      r_sigma = DUMMY_VAR__;
      
      r_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, r_sigma);
      local_scalar_t__ u_sigma;
      u_sigma = DUMMY_VAR__;
      
      u_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, u_sigma);
      local_scalar_t__ mu_alpha;
      mu_alpha = DUMMY_VAR__;
      
      mu_alpha = in__.read<local_scalar_t__>();
      out__.write(mu_alpha);
      local_scalar_t__ s_alpha;
      s_alpha = DUMMY_VAR__;
      
      s_alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_alpha);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_alpha;
      z_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(r_n_subjectids);
      stan::math::fill(z_alpha, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        assign(z_alpha, in__.read<local_scalar_t__>(),
          "assigning variable z_alpha", index_uni(sym1__));
      }
      out__.write(z_alpha);
      local_scalar_t__ mu_F;
      mu_F = DUMMY_VAR__;
      
      mu_F = in__.read<local_scalar_t__>();
      out__.write(mu_F);
      local_scalar_t__ b_cl_age;
      b_cl_age = DUMMY_VAR__;
      
      b_cl_age = in__.read<local_scalar_t__>();
      out__.write(b_cl_age);
      local_scalar_t__ b_cl_weight;
      b_cl_weight = DUMMY_VAR__;
      
      b_cl_weight = in__.read<local_scalar_t__>();
      out__.write(b_cl_weight);
      local_scalar_t__ b_cl_is_male;
      b_cl_is_male = DUMMY_VAR__;
      
      b_cl_is_male = in__.read<local_scalar_t__>();
      out__.write(b_cl_is_male);
      local_scalar_t__ b_cl_creatinine;
      b_cl_creatinine = DUMMY_VAR__;
      
      b_cl_creatinine = in__.read<local_scalar_t__>();
      out__.write(b_cl_creatinine);
      local_scalar_t__ b_t_age;
      b_t_age = DUMMY_VAR__;
      
      b_t_age = in__.read<local_scalar_t__>();
      out__.write(b_t_age);
      local_scalar_t__ b_t_weight;
      b_t_weight = DUMMY_VAR__;
      
      b_t_weight = in__.read<local_scalar_t__>();
      out__.write(b_t_weight);
      local_scalar_t__ b_t_is_male;
      b_t_is_male = DUMMY_VAR__;
      
      b_t_is_male = in__.read<local_scalar_t__>();
      out__.write(b_t_is_male);
      local_scalar_t__ b_t_creatinine;
      b_t_creatinine = DUMMY_VAR__;
      
      b_t_creatinine = in__.read<local_scalar_t__>();
      out__.write(b_t_creatinine);
      local_scalar_t__ b_a_creatinine;
      b_a_creatinine = DUMMY_VAR__;
      
      b_a_creatinine = in__.read<local_scalar_t__>();
      out__.write(b_a_creatinine);
      local_scalar_t__ b_F_amio;
      b_F_amio = DUMMY_VAR__;
      
      b_F_amio = in__.read<local_scalar_t__>();
      out__.write(b_F_amio);
      local_scalar_t__ tau_F;
      tau_F = DUMMY_VAR__;
      
      tau_F = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_F);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_cl", "s_cl", "z_cl", "mu_tmax",
      "s_t", "z_t", "phi", "kappa", "delays", "r_sigma", "u_sigma",
      "mu_alpha", "s_alpha", "z_alpha", "mu_F", "b_cl_age", "b_cl_weight",
      "b_cl_is_male", "b_cl_creatinine", "b_t_age", "b_t_weight",
      "b_t_is_male", "b_t_creatinine", "b_a_creatinine", "b_F_amio", "tau_F",
      "r_Cl", "r_tmax", "r_alpha", "r_ka", "r_ke", "delayed_time", "r_F",
      "r_C", "u_Cl", "u_tmax", "u_alpha", "u_ka", "u_ke", "u_F", "u_C",
      "u_C0", "r_yppc", "u_yppc"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(r_n_subjectids)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(r_n_subjectids)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(r_n_subjectids)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(r_n_subjectids)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(r_n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(r_n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(r_n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(r_n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(r_n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(r_n)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(r_n)},
      std::vector<size_t>{static_cast<size_t>(u_n)},
      std::vector<size_t>{static_cast<size_t>(u_n)},
      std::vector<size_t>{static_cast<size_t>(u_n)},
      std::vector<size_t>{static_cast<size_t>(u_n)},
      std::vector<size_t>{static_cast<size_t>(u_n)},
      std::vector<size_t>{static_cast<size_t>(u_n)},
      std::vector<size_t>{static_cast<size_t>(u_n)},
      std::vector<size_t>{static_cast<size_t>(u_n)},
      std::vector<size_t>{static_cast<size_t>(r_n)},
      std::vector<size_t>{static_cast<size_t>(u_n)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_cl");
    param_names__.emplace_back(std::string() + "s_cl");
    for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_cl" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_tmax");
    param_names__.emplace_back(std::string() + "s_t");
    for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_t" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "phi");
    param_names__.emplace_back(std::string() + "kappa");
    for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delays" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "r_sigma");
    param_names__.emplace_back(std::string() + "u_sigma");
    param_names__.emplace_back(std::string() + "mu_alpha");
    param_names__.emplace_back(std::string() + "s_alpha");
    for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_F");
    param_names__.emplace_back(std::string() + "b_cl_age");
    param_names__.emplace_back(std::string() + "b_cl_weight");
    param_names__.emplace_back(std::string() + "b_cl_is_male");
    param_names__.emplace_back(std::string() + "b_cl_creatinine");
    param_names__.emplace_back(std::string() + "b_t_age");
    param_names__.emplace_back(std::string() + "b_t_weight");
    param_names__.emplace_back(std::string() + "b_t_is_male");
    param_names__.emplace_back(std::string() + "b_t_creatinine");
    param_names__.emplace_back(std::string() + "b_a_creatinine");
    param_names__.emplace_back(std::string() + "b_F_amio");
    param_names__.emplace_back(std::string() + "tau_F");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_Cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_tmax" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_alpha" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_ka" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_ke" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "delayed_time" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "r_F");
      for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_C" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_Cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_tmax" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_alpha" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_ka" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_ke" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_F" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_C" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_C0" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_yppc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_yppc" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_cl");
    param_names__.emplace_back(std::string() + "s_cl");
    for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_cl" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_tmax");
    param_names__.emplace_back(std::string() + "s_t");
    for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_t" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "phi");
    param_names__.emplace_back(std::string() + "kappa");
    for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delays" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "r_sigma");
    param_names__.emplace_back(std::string() + "u_sigma");
    param_names__.emplace_back(std::string() + "mu_alpha");
    param_names__.emplace_back(std::string() + "s_alpha");
    for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_F");
    param_names__.emplace_back(std::string() + "b_cl_age");
    param_names__.emplace_back(std::string() + "b_cl_weight");
    param_names__.emplace_back(std::string() + "b_cl_is_male");
    param_names__.emplace_back(std::string() + "b_cl_creatinine");
    param_names__.emplace_back(std::string() + "b_t_age");
    param_names__.emplace_back(std::string() + "b_t_weight");
    param_names__.emplace_back(std::string() + "b_t_is_male");
    param_names__.emplace_back(std::string() + "b_t_creatinine");
    param_names__.emplace_back(std::string() + "b_a_creatinine");
    param_names__.emplace_back(std::string() + "b_F_amio");
    param_names__.emplace_back(std::string() + "tau_F");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_Cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_tmax" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_alpha" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_ka" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= r_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_ke" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "delayed_time" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "r_F");
      for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_C" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_Cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_tmax" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_alpha" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_ka" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_ke" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_F" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_C" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_C0" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= r_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_yppc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= u_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u_yppc" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_cl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_cl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"mu_tmax\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delays\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"r_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"mu_F\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_weight\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_weight\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_a_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_F_amio\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_F\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_Cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_tmax\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_ka\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"delayed_time\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_F\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"r_C\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_Cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_tmax\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_ka\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_F\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_C\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_C0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_yppc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(r_n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"u_yppc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(u_n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_cl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_cl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"mu_tmax\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delays\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"r_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"mu_F\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_weight\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_weight\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_a_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_F_amio\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_F\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_Cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_tmax\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_ka\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"delayed_time\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_F\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"r_C\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_Cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_tmax\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_ka\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_F\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_C\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"u_C0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(u_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_yppc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(r_n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"u_yppc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(u_n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((((((((((((((((1 + 1) + r_n_subjectids) + 1) + 1) +
                        r_n_subjectids) + 1) + 1) + r_n_subjectids) + 1) + 1)
                  + 1) + 1) + r_n_subjectids) + 1) + 1) + 1) + 1) + 1) + 1) +
         1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((((((((((((r_n_subjectids + r_n_subjectids) + r_n_subjectids) +
                r_n_subjectids) + r_n_subjectids) + r_n) + 1) + r_n) + u_n) +
          u_n) + u_n) + u_n) + u_n) + u_n) + u_n) + u_n);
      const size_t num_gen_quantities = 
  (r_n + u_n);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((((((((((((((((1 + 1) + r_n_subjectids) + 1) + 1) +
                        r_n_subjectids) + 1) + 1) + r_n_subjectids) + 1) + 1)
                  + 1) + 1) + r_n_subjectids) + 1) + 1) + 1) + 1) + 1) + 1) +
         1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((((((((((((r_n_subjectids + r_n_subjectids) + r_n_subjectids) +
                r_n_subjectids) + r_n_subjectids) + r_n) + 1) + r_n) + u_n) +
          u_n) + u_n) + u_n) + u_n) + u_n) + u_n) + u_n);
      const size_t num_gen_quantities = 
  (r_n + u_n);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 26> names__{"mu_cl", "s_cl", "z_cl",
      "mu_tmax", "s_t", "z_t", "phi", "kappa", "delays", "r_sigma", "u_sigma"
      , "mu_alpha", "s_alpha", "z_alpha", "mu_F", "b_cl_age", "b_cl_weight",
      "b_cl_is_male", "b_cl_creatinine", "b_t_age", "b_t_weight",
      "b_t_is_male", "b_t_creatinine", "b_a_creatinine", "b_F_amio", "tau_F"
      };
      const std::array<Eigen::Index, 26> constrain_param_sizes__{1, 1,
       r_n_subjectids, 1, 1, r_n_subjectids, 1, 1, r_n_subjectids, 1, 
       1, 1, 1, r_n_subjectids, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = _008_combined_data_model_model_namespace::_008_combined_data_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return _008_combined_data_model_model_namespace::profiles__;
}

#endif


