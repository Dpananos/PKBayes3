
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace simulation_inference_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 126> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 35, column 2 to column 14)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 36, column 2 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 37, column 2 to column 34)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 39, column 2 to column 15)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 40, column 2 to column 20)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 41, column 2 to column 33)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 43, column 2 to column 28)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 44, column 2 to column 29)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 46, column 2 to column 16)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 47, column 2 to column 24)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 48, column 2 to column 37)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 50, column 2 to column 12)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 52, column 2 to column 16)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 53, column 2 to column 19)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 54, column 2 to column 20)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 55, column 2 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 57, column 2 to column 15)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 58, column 2 to column 18)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 59, column 2 to column 19)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 60, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 62, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 64, column 2 to column 16)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 66, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 70, column 2 to column 185)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 71, column 2 to column 182)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 72, column 2 to column 133)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 73, column 2 to column 99)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 74, column 2 to column 114)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 75, column 2 to column 51)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 76, column 2 to column 209)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 78, column 1 to column 167)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 79, column 2 to column 168)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 80, column 2 to column 106)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 81, column 2 to column 93)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 82, column 2 to column 66)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 83, column 2 to column 87)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 85, column 2 to column 65)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 86, column 2 to column 66)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 89, column 4 to column 126)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 88, column 16 to line 90, column 3)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 88, column 2 to line 90, column 3)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 91, column 2 to column 108)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 132, column 2 to column 70)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 133, column 2 to column 74)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 96, column 2 to column 34)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 97, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 98, column 2 to column 21)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 100, column 2 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 101, column 2 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 102, column 2 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 105, column 2 to column 31)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 106, column 2 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 107, column 2 to column 24)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 109, column 2 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 111, column 2 to column 29)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 112, column 2 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 113, column 2 to column 33)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 114, column 2 to column 36)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 116, column 2 to column 28)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 117, column 2 to column 31)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 118, column 2 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 119, column 2 to column 35)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 121, column 2 to column 35)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 123, column 2 to column 42)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 124, column 2 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 126, column 2 to column 41)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 127, column 2 to column 42)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 128, column 2 to column 52)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 129, column 2 to column 55)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 8, column 2 to column 14)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 9, column 23 to column 30)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 9, column 2 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 10, column 2 to column 25)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 11, column 9 to column 16)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 11, column 2 to column 29)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 12, column 9 to column 16)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 12, column 2 to column 29)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 14, column 9 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 14, column 2 to column 43)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 15, column 9 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 15, column 2 to column 42)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 16, column 9 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 16, column 2 to column 46)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 17, column 9 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 17, column 2 to column 39)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 18, column 9 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 18, column 2 to column 40)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 21, column 2 to column 15)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 22, column 9 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 22, column 2 to column 31)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 23, column 9 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 23, column 2 to column 31)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 25, column 9 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 25, column 2 to column 34)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 26, column 9 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 26, column 2 to column 33)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 27, column 9 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 27, column 2 to column 37)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 28, column 9 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 28, column 2 to column 30)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 29, column 9 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 29, column 2 to column 31)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 30, column 9 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 30, column 2 to column 31)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 37, column 9 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 41, column 9 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 48, column 9 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 70, column 18 to column 36)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 71, column 18 to column 36)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 72, column 27 to column 45)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 73, column 18 to column 36)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 74, column 18 to column 36)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 76, column 18 to column 25)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 78, column 17 to column 25)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 79, column 18 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 80, column 27 to column 35)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 81, column 18 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 82, column 18 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 83, column 27 to column 35)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 85, column 18 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 86, column 18 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 132, column 18 to column 25)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 133, column 19 to column 27)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 3, column 4 to column 86)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulation_inference.stan', line 2, column 85 to line 4, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>, -1, 1>
concentration(const T0__& t_arg__, const T1__& D_arg__, const T2__& F_arg__,
              const T3__& Cl_arg__, const T4__& ka_arg__,
              const T5__& ke_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>;
  int current_statement__ = 0; 
  const auto& t = to_ref(t_arg__);
  const auto& D = to_ref(D_arg__);
  const auto& F = to_ref(F_arg__);
  const auto& Cl = to_ref(Cl_arg__);
  const auto& ka = to_ref(ka_arg__);
  const auto& ke = to_ref(ke_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 124;
    return elt_multiply(
             elt_divide(
               elt_multiply(elt_multiply(elt_multiply(D, F), ka), ke),
               elt_multiply(Cl, subtract(ke, ka))),
             subtract(stan::math::exp(elt_multiply(minus(ka), t)),
               stan::math::exp(elt_multiply(minus(ke), t))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct concentration_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>, -1, 1>
operator()(const T0__& t, const T1__& D, const T2__& F, const T3__& Cl,
           const T4__& ka, const T5__& ke, std::ostream* pstream__)  const 
{
return concentration(t, D, F, Cl, ka, ke, pstream__);
}
};

class simulation_inference_model final : public model_base_crtp<simulation_inference_model> {

 private:
  int dense_n;
  std::vector<int> dense_subjectids;
  int dense_n_subjectids;
  Eigen::Matrix<double, -1, 1> dense_time__;
  Eigen::Matrix<double, -1, 1> dense_yobs__;
  Eigen::Matrix<double, -1, 1> dense_is_male__;
  Eigen::Matrix<double, -1, 1> dense_weight__;
  Eigen::Matrix<double, -1, 1> dense_creatinine__;
  Eigen::Matrix<double, -1, 1> dense_age__;
  Eigen::Matrix<double, -1, 1> dense_dose__;
  int sparse_n;
  Eigen::Matrix<double, -1, 1> sparse_time__;
  Eigen::Matrix<double, -1, 1> sparse_yobs__;
  Eigen::Matrix<double, -1, 1> sparse_is_male__;
  Eigen::Matrix<double, -1, 1> sparse_weight__;
  Eigen::Matrix<double, -1, 1> sparse_creatinine__;
  Eigen::Matrix<double, -1, 1> sparse_age__;
  Eigen::Matrix<double, -1, 1> sparse_dose__;
  Eigen::Matrix<double, -1, 1> sparse_amio__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dense_time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dense_yobs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dense_is_male{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dense_weight{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dense_creatinine{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dense_age{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dense_dose{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sparse_time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sparse_yobs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sparse_is_male{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sparse_weight{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sparse_creatinine{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sparse_age{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sparse_dose{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sparse_amio{nullptr, 0};
 
 public:
  ~simulation_inference_model() { }
  
  inline std::string model_name() const final { return "simulation_inference_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  simulation_inference_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "simulation_inference_model_namespace::simulation_inference_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 70;
      context__.validate_dims("data initialization","dense_n","int",
           std::vector<size_t>{});
      dense_n = std::numeric_limits<int>::min();
      
      current_statement__ = 70;
      dense_n = context__.vals_i("dense_n")[(1 - 1)];
      current_statement__ = 71;
      validate_non_negative_index("dense_subjectids", "dense_n", dense_n);
      current_statement__ = 72;
      context__.validate_dims("data initialization","dense_subjectids","int",
           std::vector<size_t>{static_cast<size_t>(dense_n)});
      dense_subjectids = std::vector<int>(dense_n, std::numeric_limits<int>::min());
      
      
      current_statement__ = 72;
      dense_subjectids = context__.vals_i("dense_subjectids");
      current_statement__ = 73;
      context__.validate_dims("data initialization","dense_n_subjectids",
          "int", std::vector<size_t>{});
      dense_n_subjectids = std::numeric_limits<int>::min();
      
      current_statement__ = 73;
      dense_n_subjectids = context__.vals_i("dense_n_subjectids")[(1 - 1)];
      current_statement__ = 74;
      validate_non_negative_index("dense_time", "dense_n", dense_n);
      current_statement__ = 75;
      context__.validate_dims("data initialization","dense_time","double",
           std::vector<size_t>{static_cast<size_t>(dense_n)});
      dense_time__ = Eigen::Matrix<double, -1, 1>(dense_n);
      new (&dense_time) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dense_time__.data(), dense_n);
      
      
      {
        std::vector<local_scalar_t__> dense_time_flat__;
        current_statement__ = 75;
        dense_time_flat__ = context__.vals_r("dense_time");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= dense_n; ++sym1__) {
          current_statement__ = 75;
          assign(dense_time, dense_time_flat__[(pos__ - 1)],
            "assigning variable dense_time", index_uni(sym1__));
          current_statement__ = 75;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 76;
      validate_non_negative_index("dense_yobs", "dense_n", dense_n);
      current_statement__ = 77;
      context__.validate_dims("data initialization","dense_yobs","double",
           std::vector<size_t>{static_cast<size_t>(dense_n)});
      dense_yobs__ = Eigen::Matrix<double, -1, 1>(dense_n);
      new (&dense_yobs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dense_yobs__.data(), dense_n);
      
      
      {
        std::vector<local_scalar_t__> dense_yobs_flat__;
        current_statement__ = 77;
        dense_yobs_flat__ = context__.vals_r("dense_yobs");
        current_statement__ = 77;
        pos__ = 1;
        current_statement__ = 77;
        for (int sym1__ = 1; sym1__ <= dense_n; ++sym1__) {
          current_statement__ = 77;
          assign(dense_yobs, dense_yobs_flat__[(pos__ - 1)],
            "assigning variable dense_yobs", index_uni(sym1__));
          current_statement__ = 77;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 78;
      validate_non_negative_index("dense_is_male", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 79;
      context__.validate_dims("data initialization","dense_is_male","double",
           std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)});
      dense_is_male__ = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      new (&dense_is_male) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dense_is_male__.data(), dense_n_subjectids);
      
      
      {
        std::vector<local_scalar_t__> dense_is_male_flat__;
        current_statement__ = 79;
        dense_is_male_flat__ = context__.vals_r("dense_is_male");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
          current_statement__ = 79;
          assign(dense_is_male, dense_is_male_flat__[(pos__ - 1)],
            "assigning variable dense_is_male", index_uni(sym1__));
          current_statement__ = 79;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 80;
      validate_non_negative_index("dense_weight", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 81;
      context__.validate_dims("data initialization","dense_weight","double",
           std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)});
      dense_weight__ = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      new (&dense_weight) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dense_weight__.data(), dense_n_subjectids);
      
      
      {
        std::vector<local_scalar_t__> dense_weight_flat__;
        current_statement__ = 81;
        dense_weight_flat__ = context__.vals_r("dense_weight");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
          current_statement__ = 81;
          assign(dense_weight, dense_weight_flat__[(pos__ - 1)],
            "assigning variable dense_weight", index_uni(sym1__));
          current_statement__ = 81;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 82;
      validate_non_negative_index("dense_creatinine", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 83;
      context__.validate_dims("data initialization","dense_creatinine",
          "double",
           std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)});
      dense_creatinine__ = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      new (&dense_creatinine) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dense_creatinine__.data(), dense_n_subjectids);
      
      
      {
        std::vector<local_scalar_t__> dense_creatinine_flat__;
        current_statement__ = 83;
        dense_creatinine_flat__ = context__.vals_r("dense_creatinine");
        current_statement__ = 83;
        pos__ = 1;
        current_statement__ = 83;
        for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
          current_statement__ = 83;
          assign(dense_creatinine, dense_creatinine_flat__[(pos__ - 1)],
            "assigning variable dense_creatinine", index_uni(sym1__));
          current_statement__ = 83;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 84;
      validate_non_negative_index("dense_age", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 85;
      context__.validate_dims("data initialization","dense_age","double",
           std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)});
      dense_age__ = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      new (&dense_age) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dense_age__.data(), dense_n_subjectids);
      
      
      {
        std::vector<local_scalar_t__> dense_age_flat__;
        current_statement__ = 85;
        dense_age_flat__ = context__.vals_r("dense_age");
        current_statement__ = 85;
        pos__ = 1;
        current_statement__ = 85;
        for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
          current_statement__ = 85;
          assign(dense_age, dense_age_flat__[(pos__ - 1)],
            "assigning variable dense_age", index_uni(sym1__));
          current_statement__ = 85;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 86;
      validate_non_negative_index("dense_dose", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 87;
      context__.validate_dims("data initialization","dense_dose","double",
           std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)});
      dense_dose__ = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      new (&dense_dose) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dense_dose__.data(), dense_n_subjectids);
      
      
      {
        std::vector<local_scalar_t__> dense_dose_flat__;
        current_statement__ = 87;
        dense_dose_flat__ = context__.vals_r("dense_dose");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
          current_statement__ = 87;
          assign(dense_dose, dense_dose_flat__[(pos__ - 1)],
            "assigning variable dense_dose", index_uni(sym1__));
          current_statement__ = 87;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 88;
      context__.validate_dims("data initialization","sparse_n","int",
           std::vector<size_t>{});
      sparse_n = std::numeric_limits<int>::min();
      
      current_statement__ = 88;
      sparse_n = context__.vals_i("sparse_n")[(1 - 1)];
      current_statement__ = 89;
      validate_non_negative_index("sparse_time", "sparse_n", sparse_n);
      current_statement__ = 90;
      context__.validate_dims("data initialization","sparse_time","double",
           std::vector<size_t>{static_cast<size_t>(sparse_n)});
      sparse_time__ = Eigen::Matrix<double, -1, 1>(sparse_n);
      new (&sparse_time) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sparse_time__.data(), sparse_n);
      
      
      {
        std::vector<local_scalar_t__> sparse_time_flat__;
        current_statement__ = 90;
        sparse_time_flat__ = context__.vals_r("sparse_time");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
          current_statement__ = 90;
          assign(sparse_time, sparse_time_flat__[(pos__ - 1)],
            "assigning variable sparse_time", index_uni(sym1__));
          current_statement__ = 90;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 91;
      validate_non_negative_index("sparse_yobs", "sparse_n", sparse_n);
      current_statement__ = 92;
      context__.validate_dims("data initialization","sparse_yobs","double",
           std::vector<size_t>{static_cast<size_t>(sparse_n)});
      sparse_yobs__ = Eigen::Matrix<double, -1, 1>(sparse_n);
      new (&sparse_yobs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sparse_yobs__.data(), sparse_n);
      
      
      {
        std::vector<local_scalar_t__> sparse_yobs_flat__;
        current_statement__ = 92;
        sparse_yobs_flat__ = context__.vals_r("sparse_yobs");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
          current_statement__ = 92;
          assign(sparse_yobs, sparse_yobs_flat__[(pos__ - 1)],
            "assigning variable sparse_yobs", index_uni(sym1__));
          current_statement__ = 92;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 93;
      validate_non_negative_index("sparse_is_male", "sparse_n", sparse_n);
      current_statement__ = 94;
      context__.validate_dims("data initialization","sparse_is_male",
          "double", std::vector<size_t>{static_cast<size_t>(sparse_n)});
      sparse_is_male__ = Eigen::Matrix<double, -1, 1>(sparse_n);
      new (&sparse_is_male) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sparse_is_male__.data(), sparse_n);
      
      
      {
        std::vector<local_scalar_t__> sparse_is_male_flat__;
        current_statement__ = 94;
        sparse_is_male_flat__ = context__.vals_r("sparse_is_male");
        current_statement__ = 94;
        pos__ = 1;
        current_statement__ = 94;
        for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
          current_statement__ = 94;
          assign(sparse_is_male, sparse_is_male_flat__[(pos__ - 1)],
            "assigning variable sparse_is_male", index_uni(sym1__));
          current_statement__ = 94;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 95;
      validate_non_negative_index("sparse_weight", "sparse_n", sparse_n);
      current_statement__ = 96;
      context__.validate_dims("data initialization","sparse_weight","double",
           std::vector<size_t>{static_cast<size_t>(sparse_n)});
      sparse_weight__ = Eigen::Matrix<double, -1, 1>(sparse_n);
      new (&sparse_weight) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sparse_weight__.data(), sparse_n);
      
      
      {
        std::vector<local_scalar_t__> sparse_weight_flat__;
        current_statement__ = 96;
        sparse_weight_flat__ = context__.vals_r("sparse_weight");
        current_statement__ = 96;
        pos__ = 1;
        current_statement__ = 96;
        for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
          current_statement__ = 96;
          assign(sparse_weight, sparse_weight_flat__[(pos__ - 1)],
            "assigning variable sparse_weight", index_uni(sym1__));
          current_statement__ = 96;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 97;
      validate_non_negative_index("sparse_creatinine", "sparse_n", sparse_n);
      current_statement__ = 98;
      context__.validate_dims("data initialization","sparse_creatinine",
          "double", std::vector<size_t>{static_cast<size_t>(sparse_n)});
      sparse_creatinine__ = Eigen::Matrix<double, -1, 1>(sparse_n);
      new (&sparse_creatinine) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sparse_creatinine__.data(), sparse_n);
      
      
      {
        std::vector<local_scalar_t__> sparse_creatinine_flat__;
        current_statement__ = 98;
        sparse_creatinine_flat__ = context__.vals_r("sparse_creatinine");
        current_statement__ = 98;
        pos__ = 1;
        current_statement__ = 98;
        for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
          current_statement__ = 98;
          assign(sparse_creatinine, sparse_creatinine_flat__[(pos__ - 1)],
            "assigning variable sparse_creatinine", index_uni(sym1__));
          current_statement__ = 98;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 99;
      validate_non_negative_index("sparse_age", "sparse_n", sparse_n);
      current_statement__ = 100;
      context__.validate_dims("data initialization","sparse_age","double",
           std::vector<size_t>{static_cast<size_t>(sparse_n)});
      sparse_age__ = Eigen::Matrix<double, -1, 1>(sparse_n);
      new (&sparse_age) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sparse_age__.data(), sparse_n);
      
      
      {
        std::vector<local_scalar_t__> sparse_age_flat__;
        current_statement__ = 100;
        sparse_age_flat__ = context__.vals_r("sparse_age");
        current_statement__ = 100;
        pos__ = 1;
        current_statement__ = 100;
        for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
          current_statement__ = 100;
          assign(sparse_age, sparse_age_flat__[(pos__ - 1)],
            "assigning variable sparse_age", index_uni(sym1__));
          current_statement__ = 100;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 101;
      validate_non_negative_index("sparse_dose", "sparse_n", sparse_n);
      current_statement__ = 102;
      context__.validate_dims("data initialization","sparse_dose","double",
           std::vector<size_t>{static_cast<size_t>(sparse_n)});
      sparse_dose__ = Eigen::Matrix<double, -1, 1>(sparse_n);
      new (&sparse_dose) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sparse_dose__.data(), sparse_n);
      
      
      {
        std::vector<local_scalar_t__> sparse_dose_flat__;
        current_statement__ = 102;
        sparse_dose_flat__ = context__.vals_r("sparse_dose");
        current_statement__ = 102;
        pos__ = 1;
        current_statement__ = 102;
        for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
          current_statement__ = 102;
          assign(sparse_dose, sparse_dose_flat__[(pos__ - 1)],
            "assigning variable sparse_dose", index_uni(sym1__));
          current_statement__ = 102;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 103;
      validate_non_negative_index("sparse_amio", "sparse_n", sparse_n);
      current_statement__ = 104;
      context__.validate_dims("data initialization","sparse_amio","double",
           std::vector<size_t>{static_cast<size_t>(sparse_n)});
      sparse_amio__ = Eigen::Matrix<double, -1, 1>(sparse_n);
      new (&sparse_amio) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sparse_amio__.data(), sparse_n);
      
      
      {
        std::vector<local_scalar_t__> sparse_amio_flat__;
        current_statement__ = 104;
        sparse_amio_flat__ = context__.vals_r("sparse_amio");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
          current_statement__ = 104;
          assign(sparse_amio, sparse_amio_flat__[(pos__ - 1)],
            "assigning variable sparse_amio", index_uni(sym1__));
          current_statement__ = 104;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 105;
      validate_non_negative_index("z_cl", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 106;
      validate_non_negative_index("z_t", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 107;
      validate_non_negative_index("z_alpha", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 108;
      validate_non_negative_index("dense_Cl", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 109;
      validate_non_negative_index("dense_tmax", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 110;
      validate_non_negative_index("dense_alpha", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 111;
      validate_non_negative_index("dense_ka", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 112;
      validate_non_negative_index("dense_ke", "dense_n_subjectids",
                                  dense_n_subjectids);
      current_statement__ = 113;
      validate_non_negative_index("dense_C", "dense_n", dense_n);
      current_statement__ = 114;
      validate_non_negative_index("sparse_Cl", "sparse_n", sparse_n);
      current_statement__ = 115;
      validate_non_negative_index("sparse_tmax", "sparse_n", sparse_n);
      current_statement__ = 116;
      validate_non_negative_index("sparse_alpha", "sparse_n", sparse_n);
      current_statement__ = 117;
      validate_non_negative_index("sparse_ka", "sparse_n", sparse_n);
      current_statement__ = 118;
      validate_non_negative_index("sparse_ke", "sparse_n", sparse_n);
      current_statement__ = 119;
      validate_non_negative_index("sparse_F", "sparse_n", sparse_n);
      current_statement__ = 120;
      validate_non_negative_index("sparse_C", "sparse_n", sparse_n);
      current_statement__ = 121;
      validate_non_negative_index("sparse_C0", "sparse_n", sparse_n);
      current_statement__ = 122;
      validate_non_negative_index("dense_yppc", "dense_n", dense_n);
      current_statement__ = 123;
      validate_non_negative_index("sparse_yppc", "sparse_n", sparse_n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + dense_n_subjectids + 1 + 1 + dense_n_subjectids
       + 1 + 1 + 1 + 1 + dense_n_subjectids + 1 + 1 + 1 + 1 + 1 + 1 + 
      1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "simulation_inference_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu_cl;
      mu_cl = DUMMY_VAR__;
      
      current_statement__ = 1;
      mu_cl = in__.template read<local_scalar_t__>();
      local_scalar_t__ s_cl;
      s_cl = DUMMY_VAR__;
      
      current_statement__ = 2;
      s_cl = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_cl;
      z_cl = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(z_cl, DUMMY_VAR__);
      
      current_statement__ = 3;
      z_cl = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
               dense_n_subjectids);
      local_scalar_t__ mu_tmax;
      mu_tmax = DUMMY_VAR__;
      
      current_statement__ = 4;
      mu_tmax = in__.template read<local_scalar_t__>();
      local_scalar_t__ s_t;
      s_t = DUMMY_VAR__;
      
      current_statement__ = 5;
      s_t = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_t;
      z_t = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(z_t, DUMMY_VAR__);
      
      current_statement__ = 6;
      z_t = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
              dense_n_subjectids);
      local_scalar_t__ dense_sigma;
      dense_sigma = DUMMY_VAR__;
      
      current_statement__ = 7;
      dense_sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      local_scalar_t__ sparse_sigma;
      sparse_sigma = DUMMY_VAR__;
      
      current_statement__ = 8;
      sparse_sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                       0, lp__);
      local_scalar_t__ mu_alpha;
      mu_alpha = DUMMY_VAR__;
      
      current_statement__ = 9;
      mu_alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ s_alpha;
      s_alpha = DUMMY_VAR__;
      
      current_statement__ = 10;
      s_alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_alpha;
      z_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(z_alpha, DUMMY_VAR__);
      
      current_statement__ = 11;
      z_alpha = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  dense_n_subjectids);
      local_scalar_t__ mu_F;
      mu_F = DUMMY_VAR__;
      
      current_statement__ = 12;
      mu_F = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_cl_age;
      b_cl_age = DUMMY_VAR__;
      
      current_statement__ = 13;
      b_cl_age = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_cl_weight;
      b_cl_weight = DUMMY_VAR__;
      
      current_statement__ = 14;
      b_cl_weight = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_cl_is_male;
      b_cl_is_male = DUMMY_VAR__;
      
      current_statement__ = 15;
      b_cl_is_male = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_cl_creatinine;
      b_cl_creatinine = DUMMY_VAR__;
      
      current_statement__ = 16;
      b_cl_creatinine = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_t_age;
      b_t_age = DUMMY_VAR__;
      
      current_statement__ = 17;
      b_t_age = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_t_weight;
      b_t_weight = DUMMY_VAR__;
      
      current_statement__ = 18;
      b_t_weight = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_t_is_male;
      b_t_is_male = DUMMY_VAR__;
      
      current_statement__ = 19;
      b_t_is_male = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_t_creatinine;
      b_t_creatinine = DUMMY_VAR__;
      
      current_statement__ = 20;
      b_t_creatinine = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_a_creatinine;
      b_a_creatinine = DUMMY_VAR__;
      
      current_statement__ = 21;
      b_a_creatinine = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_F_amio;
      b_F_amio = DUMMY_VAR__;
      
      current_statement__ = 22;
      b_F_amio = in__.template read<local_scalar_t__>();
      local_scalar_t__ tau_F;
      tau_F = DUMMY_VAR__;
      
      current_statement__ = 23;
      tau_F = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> dense_Cl;
      dense_Cl = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(dense_Cl, DUMMY_VAR__);
      
      current_statement__ = 24;
      assign(dense_Cl,
        stan::math::exp(
          add(
            add(
              add(
                add(add(mu_cl, multiply(z_cl, s_cl)),
                  multiply(b_cl_age, dense_age)),
                multiply(b_cl_weight, dense_weight)),
              multiply(b_cl_is_male, dense_is_male)),
            multiply(b_cl_creatinine, dense_creatinine))),
        "assigning variable dense_Cl");
      Eigen::Matrix<local_scalar_t__, -1, 1> dense_tmax;
      dense_tmax = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(dense_tmax, DUMMY_VAR__);
      
      current_statement__ = 25;
      assign(dense_tmax,
        stan::math::exp(
          add(
            add(
              add(
                add(add(mu_tmax, multiply(z_t, s_t)),
                  multiply(b_t_age, dense_age)),
                multiply(b_t_weight, dense_weight)),
              multiply(b_t_is_male, dense_is_male)),
            multiply(b_t_creatinine, dense_creatinine))),
        "assigning variable dense_tmax");
      Eigen::Matrix<local_scalar_t__, -1, 1> dense_alpha;
      dense_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(dense_alpha, DUMMY_VAR__);
      
      current_statement__ = 26;
      assign(dense_alpha,
        inv_logit(
          add(add(mu_alpha, multiply(z_alpha, s_alpha)),
            multiply(b_a_creatinine, dense_creatinine))),
        "assigning variable dense_alpha");
      Eigen::Matrix<local_scalar_t__, -1, 1> dense_ka;
      dense_ka = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(dense_ka, DUMMY_VAR__);
      
      current_statement__ = 27;
      assign(dense_ka,
        elt_divide(stan::math::log(dense_alpha),
          elt_multiply(dense_tmax, subtract(dense_alpha, 1))),
        "assigning variable dense_ka");
      Eigen::Matrix<local_scalar_t__, -1, 1> dense_ke;
      dense_ke = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(dense_ke, DUMMY_VAR__);
      
      current_statement__ = 28;
      assign(dense_ke,
        elt_divide(elt_multiply(dense_alpha, stan::math::log(dense_alpha)),
          elt_multiply(dense_tmax, subtract(dense_alpha, 1))),
        "assigning variable dense_ke");
      local_scalar_t__ dense_F;
      dense_F = DUMMY_VAR__;
      
      current_statement__ = 29;
      dense_F = inv_logit(mu_F);
      Eigen::Matrix<local_scalar_t__, -1, 1> dense_C;
      dense_C = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n);
      stan::math::fill(dense_C, DUMMY_VAR__);
      
      current_statement__ = 30;
      assign(dense_C,
        concentration(dense_time,
          rvalue(dense_dose, "dense_dose", index_multi(dense_subjectids)),
          rep_vector(dense_F, dense_n),
          rvalue(dense_Cl, "dense_Cl", index_multi(dense_subjectids)),
          rvalue(dense_ka, "dense_ka", index_multi(dense_subjectids)),
          rvalue(dense_ke, "dense_ke", index_multi(dense_subjectids)), pstream__),
        "assigning variable dense_C");
      Eigen::Matrix<local_scalar_t__, -1, 1> sparse_Cl;
      sparse_Cl = Eigen::Matrix<local_scalar_t__, -1, 1>(sparse_n);
      stan::math::fill(sparse_Cl, DUMMY_VAR__);
      
      current_statement__ = 31;
      assign(sparse_Cl,
        stan::math::exp(
          add(
            add(
              add(add(mu_cl, multiply(b_cl_age, sparse_age)),
                multiply(b_cl_weight, sparse_weight)),
              multiply(b_cl_is_male, sparse_is_male)),
            multiply(b_cl_creatinine, sparse_creatinine))),
        "assigning variable sparse_Cl");
      Eigen::Matrix<local_scalar_t__, -1, 1> sparse_tmax;
      sparse_tmax = Eigen::Matrix<local_scalar_t__, -1, 1>(sparse_n);
      stan::math::fill(sparse_tmax, DUMMY_VAR__);
      
      current_statement__ = 32;
      assign(sparse_tmax,
        stan::math::exp(
          add(
            add(
              add(add(mu_tmax, multiply(b_t_age, sparse_age)),
                multiply(b_t_weight, sparse_weight)),
              multiply(b_t_is_male, sparse_is_male)),
            multiply(b_t_creatinine, sparse_creatinine))),
        "assigning variable sparse_tmax");
      Eigen::Matrix<local_scalar_t__, -1, 1> sparse_alpha;
      sparse_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(sparse_n);
      stan::math::fill(sparse_alpha, DUMMY_VAR__);
      
      current_statement__ = 33;
      assign(sparse_alpha,
        inv_logit(add(mu_alpha, multiply(b_a_creatinine, sparse_creatinine))),
        "assigning variable sparse_alpha");
      Eigen::Matrix<local_scalar_t__, -1, 1> sparse_ka;
      sparse_ka = Eigen::Matrix<local_scalar_t__, -1, 1>(sparse_n);
      stan::math::fill(sparse_ka, DUMMY_VAR__);
      
      current_statement__ = 34;
      assign(sparse_ka,
        elt_divide(stan::math::log(sparse_alpha),
          elt_multiply(sparse_tmax, subtract(sparse_alpha, 1))),
        "assigning variable sparse_ka");
      Eigen::Matrix<local_scalar_t__, -1, 1> sparse_ke;
      sparse_ke = Eigen::Matrix<local_scalar_t__, -1, 1>(sparse_n);
      stan::math::fill(sparse_ke, DUMMY_VAR__);
      
      current_statement__ = 35;
      assign(sparse_ke, elt_multiply(sparse_alpha, sparse_ka),
        "assigning variable sparse_ke");
      Eigen::Matrix<local_scalar_t__, -1, 1> sparse_F;
      sparse_F = Eigen::Matrix<local_scalar_t__, -1, 1>(sparse_n);
      stan::math::fill(sparse_F, DUMMY_VAR__);
      
      current_statement__ = 36;
      assign(sparse_F, inv_logit(add(mu_F, multiply(b_F_amio, sparse_amio))),
        "assigning variable sparse_F");
      Eigen::Matrix<local_scalar_t__, -1, 1> sparse_C;
      sparse_C = Eigen::Matrix<local_scalar_t__, -1, 1>(sparse_n);
      stan::math::fill(sparse_C, DUMMY_VAR__);
      
      current_statement__ = 37;
      assign(sparse_C, rep_vector(0.0, sparse_n),
        "assigning variable sparse_C");
      Eigen::Matrix<local_scalar_t__, -1, 1> sparse_C0;
      sparse_C0 = Eigen::Matrix<local_scalar_t__, -1, 1>(sparse_n);
      stan::math::fill(sparse_C0, DUMMY_VAR__);
      
      current_statement__ = 38;
      assign(sparse_C0, rep_vector(0.0, sparse_n),
        "assigning variable sparse_C0");
      current_statement__ = 41;
      for (int i = 1; i <= 14; ++i) {
        current_statement__ = 39;
        assign(sparse_C0,
          add(stan::model::deep_copy(sparse_C0),
            concentration(rep_vector((12 * i), sparse_n), sparse_dose,
              sparse_F, sparse_Cl, sparse_ka, sparse_ke, pstream__)),
          "assigning variable sparse_C0");
      }
      current_statement__ = 42;
      assign(sparse_C,
        add(sparse_C0,
          concentration(sparse_time, sparse_dose, sparse_F, sparse_Cl,
            sparse_ka, sparse_ke, pstream__)), "assigning variable sparse_C");
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 24;
        check_greater_or_equal(function__, "dense_Cl[sym1__]",
                               dense_Cl[(sym1__ - 1)], 0);
      }
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 25;
        check_greater_or_equal(function__, "dense_tmax[sym1__]",
                               dense_tmax[(sym1__ - 1)], 0);
      }
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 26;
        check_greater_or_equal(function__, "dense_alpha[sym1__]",
                               dense_alpha[(sym1__ - 1)], 0);
      }
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 26;
        check_less_or_equal(function__, "dense_alpha[sym1__]",
                            dense_alpha[(sym1__ - 1)], 1);
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 27;
        check_greater_or_equal(function__, "dense_ka[sym1__]",
                               dense_ka[(sym1__ - 1)], 0);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 28;
        check_greater_or_equal(function__, "dense_ke[sym1__]",
                               dense_ke[(sym1__ - 1)], 0);
      }
      current_statement__ = 29;
      check_greater_or_equal(function__, "dense_F", dense_F, 0);
      current_statement__ = 29;
      check_less_or_equal(function__, "dense_F", dense_F, 1);
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= dense_n; ++sym1__) {
        current_statement__ = 30;
        check_greater_or_equal(function__, "dense_C[sym1__]",
                               dense_C[(sym1__ - 1)], 0);
      }
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 31;
        check_greater_or_equal(function__, "sparse_Cl[sym1__]",
                               sparse_Cl[(sym1__ - 1)], 0);
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 32;
        check_greater_or_equal(function__, "sparse_tmax[sym1__]",
                               sparse_tmax[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 33;
        check_greater_or_equal(function__, "sparse_alpha[sym1__]",
                               sparse_alpha[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 33;
        check_less_or_equal(function__, "sparse_alpha[sym1__]",
                            sparse_alpha[(sym1__ - 1)], 1);
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 34;
        check_greater_or_equal(function__, "sparse_ka[sym1__]",
                               sparse_ka[(sym1__ - 1)], 0);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 35;
        check_greater_or_equal(function__, "sparse_ke[sym1__]",
                               sparse_ke[(sym1__ - 1)], 0);
      }
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 36;
        check_greater_or_equal(function__, "sparse_F[sym1__]",
                               sparse_F[(sym1__ - 1)], 0);
      }
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 36;
        check_less_or_equal(function__, "sparse_F[sym1__]",
                            sparse_F[(sym1__ - 1)], 1);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 37;
        check_greater_or_equal(function__, "sparse_C[sym1__]",
                               sparse_C[(sym1__ - 1)], 0);
      }
      current_statement__ = 38;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 38;
        check_greater_or_equal(function__, "sparse_C0[sym1__]",
                               sparse_C0[(sym1__ - 1)], 0);
      }
      {
        current_statement__ = 45;
        lp_accum__.add(
          normal_lpdf<propto__>(mu_tmax, stan::math::log(3.3), 0.1));
        current_statement__ = 46;
        lp_accum__.add(gamma_lpdf<propto__>(s_t, 5, 100));
        current_statement__ = 47;
        lp_accum__.add(std_normal_lpdf<propto__>(z_t));
        current_statement__ = 48;
        lp_accum__.add(
          normal_lpdf<propto__>(mu_cl, stan::math::log(3.3), 0.15));
        current_statement__ = 49;
        lp_accum__.add(gamma_lpdf<propto__>(s_cl, 15, 100));
        current_statement__ = 50;
        lp_accum__.add(std_normal_lpdf<propto__>(z_cl));
        current_statement__ = 51;
        lp_accum__.add(normal_lpdf<propto__>(mu_alpha, -0.25, 0.5));
        current_statement__ = 52;
        lp_accum__.add(gamma_lpdf<propto__>(s_alpha, 10, 100));
        current_statement__ = 53;
        lp_accum__.add(normal_lpdf<propto__>(z_alpha, 0, 1));
        current_statement__ = 54;
        lp_accum__.add(normal_lpdf<propto__>(mu_F, 0, 0.025));
        current_statement__ = 55;
        lp_accum__.add(normal_lpdf<propto__>(b_cl_age, 0, 0.25));
        current_statement__ = 56;
        lp_accum__.add(normal_lpdf<propto__>(b_cl_weight, 0, 0.25));
        current_statement__ = 57;
        lp_accum__.add(normal_lpdf<propto__>(b_cl_is_male, 0, 0.25));
        current_statement__ = 58;
        lp_accum__.add(normal_lpdf<propto__>(b_cl_creatinine, 0, 0.25));
        current_statement__ = 59;
        lp_accum__.add(normal_lpdf<propto__>(b_t_age, 0, 0.25));
        current_statement__ = 60;
        lp_accum__.add(normal_lpdf<propto__>(b_t_weight, 0, 0.25));
        current_statement__ = 61;
        lp_accum__.add(normal_lpdf<propto__>(b_t_is_male, 0, 0.25));
        current_statement__ = 62;
        lp_accum__.add(normal_lpdf<propto__>(b_t_creatinine, 0, 0.25));
        current_statement__ = 63;
        lp_accum__.add(normal_lpdf<propto__>(b_a_creatinine, 0, 0.25));
        current_statement__ = 64;
        lp_accum__.add(double_exponential_lpdf<propto__>(b_F_amio, 0, tau_F));
        current_statement__ = 65;
        lp_accum__.add(normal_lpdf<propto__>(tau_F, 0, 0.25));
        current_statement__ = 66;
        lp_accum__.add(
          lognormal_lpdf<propto__>(dense_sigma, stan::math::log(0.1), 0.2));
        current_statement__ = 67;
        lp_accum__.add(
          lognormal_lpdf<propto__>(sparse_sigma, stan::math::log(0.1), 0.2));
        current_statement__ = 68;
        lp_accum__.add(
          lognormal_lpdf<propto__>(dense_yobs, stan::math::log(dense_C),
            dense_sigma));
        current_statement__ = 69;
        lp_accum__.add(
          lognormal_lpdf<propto__>(sparse_yobs, stan::math::log(sparse_C),
            sparse_sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "simulation_inference_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu_cl;
      mu_cl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu_cl = in__.template read<local_scalar_t__>();
      double s_cl;
      s_cl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      s_cl = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<double, -1, 1> z_cl;
      z_cl = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      stan::math::fill(z_cl, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      z_cl = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
               dense_n_subjectids);
      double mu_tmax;
      mu_tmax = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu_tmax = in__.template read<local_scalar_t__>();
      double s_t;
      s_t = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      s_t = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double, -1, 1> z_t;
      z_t = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      stan::math::fill(z_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      z_t = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
              dense_n_subjectids);
      double dense_sigma;
      dense_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      dense_sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      double sparse_sigma;
      sparse_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sparse_sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                       0, lp__);
      double mu_alpha;
      mu_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      mu_alpha = in__.template read<local_scalar_t__>();
      double s_alpha;
      s_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      s_alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<double, -1, 1> z_alpha;
      z_alpha = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      stan::math::fill(z_alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      z_alpha = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  dense_n_subjectids);
      double mu_F;
      mu_F = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      mu_F = in__.template read<local_scalar_t__>();
      double b_cl_age;
      b_cl_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      b_cl_age = in__.template read<local_scalar_t__>();
      double b_cl_weight;
      b_cl_weight = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      b_cl_weight = in__.template read<local_scalar_t__>();
      double b_cl_is_male;
      b_cl_is_male = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      b_cl_is_male = in__.template read<local_scalar_t__>();
      double b_cl_creatinine;
      b_cl_creatinine = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      b_cl_creatinine = in__.template read<local_scalar_t__>();
      double b_t_age;
      b_t_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      b_t_age = in__.template read<local_scalar_t__>();
      double b_t_weight;
      b_t_weight = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      b_t_weight = in__.template read<local_scalar_t__>();
      double b_t_is_male;
      b_t_is_male = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      b_t_is_male = in__.template read<local_scalar_t__>();
      double b_t_creatinine;
      b_t_creatinine = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      b_t_creatinine = in__.template read<local_scalar_t__>();
      double b_a_creatinine;
      b_a_creatinine = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      b_a_creatinine = in__.template read<local_scalar_t__>();
      double b_F_amio;
      b_F_amio = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      b_F_amio = in__.template read<local_scalar_t__>();
      double tau_F;
      tau_F = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 23;
      tau_F = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> dense_Cl;
      dense_Cl = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      stan::math::fill(dense_Cl, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> dense_tmax;
      dense_tmax = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      stan::math::fill(dense_tmax, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> dense_alpha;
      dense_alpha = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      stan::math::fill(dense_alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> dense_ka;
      dense_ka = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      stan::math::fill(dense_ka, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> dense_ke;
      dense_ke = Eigen::Matrix<double, -1, 1>(dense_n_subjectids);
      stan::math::fill(dense_ke, std::numeric_limits<double>::quiet_NaN());
      
      double dense_F;
      dense_F = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> dense_C;
      dense_C = Eigen::Matrix<double, -1, 1>(dense_n);
      stan::math::fill(dense_C, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sparse_Cl;
      sparse_Cl = Eigen::Matrix<double, -1, 1>(sparse_n);
      stan::math::fill(sparse_Cl, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sparse_tmax;
      sparse_tmax = Eigen::Matrix<double, -1, 1>(sparse_n);
      stan::math::fill(sparse_tmax, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sparse_alpha;
      sparse_alpha = Eigen::Matrix<double, -1, 1>(sparse_n);
      stan::math::fill(sparse_alpha, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> sparse_ka;
      sparse_ka = Eigen::Matrix<double, -1, 1>(sparse_n);
      stan::math::fill(sparse_ka, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sparse_ke;
      sparse_ke = Eigen::Matrix<double, -1, 1>(sparse_n);
      stan::math::fill(sparse_ke, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sparse_F;
      sparse_F = Eigen::Matrix<double, -1, 1>(sparse_n);
      stan::math::fill(sparse_F, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sparse_C;
      sparse_C = Eigen::Matrix<double, -1, 1>(sparse_n);
      stan::math::fill(sparse_C, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sparse_C0;
      sparse_C0 = Eigen::Matrix<double, -1, 1>(sparse_n);
      stan::math::fill(sparse_C0, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(mu_cl);
      out__.write(s_cl);
      out__.write(z_cl);
      out__.write(mu_tmax);
      out__.write(s_t);
      out__.write(z_t);
      out__.write(dense_sigma);
      out__.write(sparse_sigma);
      out__.write(mu_alpha);
      out__.write(s_alpha);
      out__.write(z_alpha);
      out__.write(mu_F);
      out__.write(b_cl_age);
      out__.write(b_cl_weight);
      out__.write(b_cl_is_male);
      out__.write(b_cl_creatinine);
      out__.write(b_t_age);
      out__.write(b_t_weight);
      out__.write(b_t_is_male);
      out__.write(b_t_creatinine);
      out__.write(b_a_creatinine);
      out__.write(b_F_amio);
      out__.write(tau_F);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 24;
      assign(dense_Cl,
        stan::math::exp(
          add(
            add(
              add(
                add(add(mu_cl, multiply(z_cl, s_cl)),
                  multiply(b_cl_age, dense_age)),
                multiply(b_cl_weight, dense_weight)),
              multiply(b_cl_is_male, dense_is_male)),
            multiply(b_cl_creatinine, dense_creatinine))),
        "assigning variable dense_Cl");
      current_statement__ = 25;
      assign(dense_tmax,
        stan::math::exp(
          add(
            add(
              add(
                add(add(mu_tmax, multiply(z_t, s_t)),
                  multiply(b_t_age, dense_age)),
                multiply(b_t_weight, dense_weight)),
              multiply(b_t_is_male, dense_is_male)),
            multiply(b_t_creatinine, dense_creatinine))),
        "assigning variable dense_tmax");
      current_statement__ = 26;
      assign(dense_alpha,
        inv_logit(
          add(add(mu_alpha, multiply(z_alpha, s_alpha)),
            multiply(b_a_creatinine, dense_creatinine))),
        "assigning variable dense_alpha");
      current_statement__ = 27;
      assign(dense_ka,
        elt_divide(stan::math::log(dense_alpha),
          elt_multiply(dense_tmax, subtract(dense_alpha, 1))),
        "assigning variable dense_ka");
      current_statement__ = 28;
      assign(dense_ke,
        elt_divide(elt_multiply(dense_alpha, stan::math::log(dense_alpha)),
          elt_multiply(dense_tmax, subtract(dense_alpha, 1))),
        "assigning variable dense_ke");
      current_statement__ = 29;
      dense_F = inv_logit(mu_F);
      current_statement__ = 30;
      assign(dense_C,
        concentration(dense_time,
          rvalue(dense_dose, "dense_dose", index_multi(dense_subjectids)),
          rep_vector(dense_F, dense_n),
          rvalue(dense_Cl, "dense_Cl", index_multi(dense_subjectids)),
          rvalue(dense_ka, "dense_ka", index_multi(dense_subjectids)),
          rvalue(dense_ke, "dense_ke", index_multi(dense_subjectids)), pstream__),
        "assigning variable dense_C");
      current_statement__ = 31;
      assign(sparse_Cl,
        stan::math::exp(
          add(
            add(
              add(add(mu_cl, multiply(b_cl_age, sparse_age)),
                multiply(b_cl_weight, sparse_weight)),
              multiply(b_cl_is_male, sparse_is_male)),
            multiply(b_cl_creatinine, sparse_creatinine))),
        "assigning variable sparse_Cl");
      current_statement__ = 32;
      assign(sparse_tmax,
        stan::math::exp(
          add(
            add(
              add(add(mu_tmax, multiply(b_t_age, sparse_age)),
                multiply(b_t_weight, sparse_weight)),
              multiply(b_t_is_male, sparse_is_male)),
            multiply(b_t_creatinine, sparse_creatinine))),
        "assigning variable sparse_tmax");
      current_statement__ = 33;
      assign(sparse_alpha,
        inv_logit(add(mu_alpha, multiply(b_a_creatinine, sparse_creatinine))),
        "assigning variable sparse_alpha");
      current_statement__ = 34;
      assign(sparse_ka,
        elt_divide(stan::math::log(sparse_alpha),
          elt_multiply(sparse_tmax, subtract(sparse_alpha, 1))),
        "assigning variable sparse_ka");
      current_statement__ = 35;
      assign(sparse_ke, elt_multiply(sparse_alpha, sparse_ka),
        "assigning variable sparse_ke");
      current_statement__ = 36;
      assign(sparse_F, inv_logit(add(mu_F, multiply(b_F_amio, sparse_amio))),
        "assigning variable sparse_F");
      current_statement__ = 37;
      assign(sparse_C, rep_vector(0.0, sparse_n),
        "assigning variable sparse_C");
      current_statement__ = 38;
      assign(sparse_C0, rep_vector(0.0, sparse_n),
        "assigning variable sparse_C0");
      current_statement__ = 41;
      for (int i = 1; i <= 14; ++i) {
        current_statement__ = 39;
        assign(sparse_C0,
          add(stan::model::deep_copy(sparse_C0),
            concentration(rep_vector((12 * i), sparse_n), sparse_dose,
              sparse_F, sparse_Cl, sparse_ka, sparse_ke, pstream__)),
          "assigning variable sparse_C0");
      }
      current_statement__ = 42;
      assign(sparse_C,
        add(sparse_C0,
          concentration(sparse_time, sparse_dose, sparse_F, sparse_Cl,
            sparse_ka, sparse_ke, pstream__)), "assigning variable sparse_C");
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 24;
        check_greater_or_equal(function__, "dense_Cl[sym1__]",
                               dense_Cl[(sym1__ - 1)], 0);
      }
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 25;
        check_greater_or_equal(function__, "dense_tmax[sym1__]",
                               dense_tmax[(sym1__ - 1)], 0);
      }
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 26;
        check_greater_or_equal(function__, "dense_alpha[sym1__]",
                               dense_alpha[(sym1__ - 1)], 0);
      }
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 26;
        check_less_or_equal(function__, "dense_alpha[sym1__]",
                            dense_alpha[(sym1__ - 1)], 1);
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 27;
        check_greater_or_equal(function__, "dense_ka[sym1__]",
                               dense_ka[(sym1__ - 1)], 0);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        current_statement__ = 28;
        check_greater_or_equal(function__, "dense_ke[sym1__]",
                               dense_ke[(sym1__ - 1)], 0);
      }
      current_statement__ = 29;
      check_greater_or_equal(function__, "dense_F", dense_F, 0);
      current_statement__ = 29;
      check_less_or_equal(function__, "dense_F", dense_F, 1);
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= dense_n; ++sym1__) {
        current_statement__ = 30;
        check_greater_or_equal(function__, "dense_C[sym1__]",
                               dense_C[(sym1__ - 1)], 0);
      }
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 31;
        check_greater_or_equal(function__, "sparse_Cl[sym1__]",
                               sparse_Cl[(sym1__ - 1)], 0);
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 32;
        check_greater_or_equal(function__, "sparse_tmax[sym1__]",
                               sparse_tmax[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 33;
        check_greater_or_equal(function__, "sparse_alpha[sym1__]",
                               sparse_alpha[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 33;
        check_less_or_equal(function__, "sparse_alpha[sym1__]",
                            sparse_alpha[(sym1__ - 1)], 1);
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 34;
        check_greater_or_equal(function__, "sparse_ka[sym1__]",
                               sparse_ka[(sym1__ - 1)], 0);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 35;
        check_greater_or_equal(function__, "sparse_ke[sym1__]",
                               sparse_ke[(sym1__ - 1)], 0);
      }
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 36;
        check_greater_or_equal(function__, "sparse_F[sym1__]",
                               sparse_F[(sym1__ - 1)], 0);
      }
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 36;
        check_less_or_equal(function__, "sparse_F[sym1__]",
                            sparse_F[(sym1__ - 1)], 1);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 37;
        check_greater_or_equal(function__, "sparse_C[sym1__]",
                               sparse_C[(sym1__ - 1)], 0);
      }
      current_statement__ = 38;
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        current_statement__ = 38;
        check_greater_or_equal(function__, "sparse_C0[sym1__]",
                               sparse_C0[(sym1__ - 1)], 0);
      }
      if (emit_transformed_parameters__) {
        out__.write(dense_Cl);
        out__.write(dense_tmax);
        out__.write(dense_alpha);
        out__.write(dense_ka);
        out__.write(dense_ke);
        out__.write(dense_F);
        out__.write(dense_C);
        out__.write(sparse_Cl);
        out__.write(sparse_tmax);
        out__.write(sparse_alpha);
        out__.write(sparse_ka);
        out__.write(sparse_ke);
        out__.write(sparse_F);
        out__.write(sparse_C);
        out__.write(sparse_C0);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> dense_yppc;
      dense_yppc = std::vector<double>(dense_n, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 43;
      assign(dense_yppc,
        lognormal_rng(stan::math::log(dense_C), dense_sigma, base_rng__),
        "assigning variable dense_yppc");
      std::vector<double> sparse_yppc;
      sparse_yppc = std::vector<double>(sparse_n, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 44;
      assign(sparse_yppc,
        lognormal_rng(stan::math::log(sparse_C), sparse_sigma, base_rng__),
        "assigning variable sparse_yppc");
      out__.write(dense_yppc);
      out__.write(sparse_yppc);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ mu_cl;
      mu_cl = DUMMY_VAR__;
      
      mu_cl = in__.read<local_scalar_t__>();
      out__.write(mu_cl);
      local_scalar_t__ s_cl;
      s_cl = DUMMY_VAR__;
      
      s_cl = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_cl);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_cl;
      z_cl = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(z_cl, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        assign(z_cl, in__.read<local_scalar_t__>(),
          "assigning variable z_cl", index_uni(sym1__));
      }
      out__.write(z_cl);
      local_scalar_t__ mu_tmax;
      mu_tmax = DUMMY_VAR__;
      
      mu_tmax = in__.read<local_scalar_t__>();
      out__.write(mu_tmax);
      local_scalar_t__ s_t;
      s_t = DUMMY_VAR__;
      
      s_t = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_t);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_t;
      z_t = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(z_t, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        assign(z_t, in__.read<local_scalar_t__>(),
          "assigning variable z_t", index_uni(sym1__));
      }
      out__.write(z_t);
      local_scalar_t__ dense_sigma;
      dense_sigma = DUMMY_VAR__;
      
      dense_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, dense_sigma);
      local_scalar_t__ sparse_sigma;
      sparse_sigma = DUMMY_VAR__;
      
      sparse_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sparse_sigma);
      local_scalar_t__ mu_alpha;
      mu_alpha = DUMMY_VAR__;
      
      mu_alpha = in__.read<local_scalar_t__>();
      out__.write(mu_alpha);
      local_scalar_t__ s_alpha;
      s_alpha = DUMMY_VAR__;
      
      s_alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_alpha);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_alpha;
      z_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(dense_n_subjectids);
      stan::math::fill(z_alpha, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        assign(z_alpha, in__.read<local_scalar_t__>(),
          "assigning variable z_alpha", index_uni(sym1__));
      }
      out__.write(z_alpha);
      local_scalar_t__ mu_F;
      mu_F = DUMMY_VAR__;
      
      mu_F = in__.read<local_scalar_t__>();
      out__.write(mu_F);
      local_scalar_t__ b_cl_age;
      b_cl_age = DUMMY_VAR__;
      
      b_cl_age = in__.read<local_scalar_t__>();
      out__.write(b_cl_age);
      local_scalar_t__ b_cl_weight;
      b_cl_weight = DUMMY_VAR__;
      
      b_cl_weight = in__.read<local_scalar_t__>();
      out__.write(b_cl_weight);
      local_scalar_t__ b_cl_is_male;
      b_cl_is_male = DUMMY_VAR__;
      
      b_cl_is_male = in__.read<local_scalar_t__>();
      out__.write(b_cl_is_male);
      local_scalar_t__ b_cl_creatinine;
      b_cl_creatinine = DUMMY_VAR__;
      
      b_cl_creatinine = in__.read<local_scalar_t__>();
      out__.write(b_cl_creatinine);
      local_scalar_t__ b_t_age;
      b_t_age = DUMMY_VAR__;
      
      b_t_age = in__.read<local_scalar_t__>();
      out__.write(b_t_age);
      local_scalar_t__ b_t_weight;
      b_t_weight = DUMMY_VAR__;
      
      b_t_weight = in__.read<local_scalar_t__>();
      out__.write(b_t_weight);
      local_scalar_t__ b_t_is_male;
      b_t_is_male = DUMMY_VAR__;
      
      b_t_is_male = in__.read<local_scalar_t__>();
      out__.write(b_t_is_male);
      local_scalar_t__ b_t_creatinine;
      b_t_creatinine = DUMMY_VAR__;
      
      b_t_creatinine = in__.read<local_scalar_t__>();
      out__.write(b_t_creatinine);
      local_scalar_t__ b_a_creatinine;
      b_a_creatinine = DUMMY_VAR__;
      
      b_a_creatinine = in__.read<local_scalar_t__>();
      out__.write(b_a_creatinine);
      local_scalar_t__ b_F_amio;
      b_F_amio = DUMMY_VAR__;
      
      b_F_amio = in__.read<local_scalar_t__>();
      out__.write(b_F_amio);
      local_scalar_t__ tau_F;
      tau_F = DUMMY_VAR__;
      
      tau_F = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_F);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_cl", "s_cl", "z_cl", "mu_tmax",
      "s_t", "z_t", "dense_sigma", "sparse_sigma", "mu_alpha", "s_alpha",
      "z_alpha", "mu_F", "b_cl_age", "b_cl_weight", "b_cl_is_male",
      "b_cl_creatinine", "b_t_age", "b_t_weight", "b_t_is_male",
      "b_t_creatinine", "b_a_creatinine", "b_F_amio", "tau_F", "dense_Cl",
      "dense_tmax", "dense_alpha", "dense_ka", "dense_ke", "dense_F",
      "dense_C", "sparse_Cl", "sparse_tmax", "sparse_alpha", "sparse_ka",
      "sparse_ke", "sparse_F", "sparse_C", "sparse_C0", "dense_yppc",
      "sparse_yppc"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(dense_n_subjectids)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(dense_n)},
      std::vector<size_t>{static_cast<size_t>(sparse_n)},
      std::vector<size_t>{static_cast<size_t>(sparse_n)},
      std::vector<size_t>{static_cast<size_t>(sparse_n)},
      std::vector<size_t>{static_cast<size_t>(sparse_n)},
      std::vector<size_t>{static_cast<size_t>(sparse_n)},
      std::vector<size_t>{static_cast<size_t>(sparse_n)},
      std::vector<size_t>{static_cast<size_t>(sparse_n)},
      std::vector<size_t>{static_cast<size_t>(sparse_n)},
      std::vector<size_t>{static_cast<size_t>(dense_n)},
      std::vector<size_t>{static_cast<size_t>(sparse_n)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_cl");
    param_names__.emplace_back(std::string() + "s_cl");
    for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_cl" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_tmax");
    param_names__.emplace_back(std::string() + "s_t");
    for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_t" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "dense_sigma");
    param_names__.emplace_back(std::string() + "sparse_sigma");
    param_names__.emplace_back(std::string() + "mu_alpha");
    param_names__.emplace_back(std::string() + "s_alpha");
    for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_F");
    param_names__.emplace_back(std::string() + "b_cl_age");
    param_names__.emplace_back(std::string() + "b_cl_weight");
    param_names__.emplace_back(std::string() + "b_cl_is_male");
    param_names__.emplace_back(std::string() + "b_cl_creatinine");
    param_names__.emplace_back(std::string() + "b_t_age");
    param_names__.emplace_back(std::string() + "b_t_weight");
    param_names__.emplace_back(std::string() + "b_t_is_male");
    param_names__.emplace_back(std::string() + "b_t_creatinine");
    param_names__.emplace_back(std::string() + "b_a_creatinine");
    param_names__.emplace_back(std::string() + "b_F_amio");
    param_names__.emplace_back(std::string() + "tau_F");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_Cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_tmax" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_alpha" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_ka" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_ke" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "dense_F");
      for (int sym1__ = 1; sym1__ <= dense_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_C" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_Cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_tmax" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_alpha" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_ka" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_ke" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_F" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_C" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_C0" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= dense_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_yppc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_yppc" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_cl");
    param_names__.emplace_back(std::string() + "s_cl");
    for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_cl" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_tmax");
    param_names__.emplace_back(std::string() + "s_t");
    for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_t" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "dense_sigma");
    param_names__.emplace_back(std::string() + "sparse_sigma");
    param_names__.emplace_back(std::string() + "mu_alpha");
    param_names__.emplace_back(std::string() + "s_alpha");
    for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_F");
    param_names__.emplace_back(std::string() + "b_cl_age");
    param_names__.emplace_back(std::string() + "b_cl_weight");
    param_names__.emplace_back(std::string() + "b_cl_is_male");
    param_names__.emplace_back(std::string() + "b_cl_creatinine");
    param_names__.emplace_back(std::string() + "b_t_age");
    param_names__.emplace_back(std::string() + "b_t_weight");
    param_names__.emplace_back(std::string() + "b_t_is_male");
    param_names__.emplace_back(std::string() + "b_t_creatinine");
    param_names__.emplace_back(std::string() + "b_a_creatinine");
    param_names__.emplace_back(std::string() + "b_F_amio");
    param_names__.emplace_back(std::string() + "tau_F");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_Cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_tmax" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_alpha" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_ka" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= dense_n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_ke" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "dense_F");
      for (int sym1__ = 1; sym1__ <= dense_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_C" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_Cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_tmax" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_alpha" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_ka" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_ke" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_F" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_C" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_C0" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= dense_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dense_yppc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sparse_n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sparse_yppc" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_cl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_cl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"mu_tmax\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"dense_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sparse_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"mu_F\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_weight\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_weight\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_a_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_F_amio\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_F\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dense_Cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_tmax\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_ka\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_F\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"dense_C\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_Cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_tmax\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_ka\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_F\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_C\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_C0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_yppc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(dense_n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"sparse_yppc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sparse_n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_cl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_cl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"mu_tmax\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"dense_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sparse_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"parameters\"},{\"name\":\"mu_F\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_weight\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_cl_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_weight\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_t_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_a_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_F_amio\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_F\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dense_Cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_tmax\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_ka\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n_subjectids) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_F\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"dense_C\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dense_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_Cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_tmax\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_ka\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_F\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_C\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sparse_C0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sparse_n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dense_yppc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(dense_n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"sparse_yppc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sparse_n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((((((((1 + 1) + dense_n_subjectids) + 1) + 1) +
                     dense_n_subjectids) + 1) + 1) + 1) + 1) +
                dense_n_subjectids) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
       1) + 1) + 1) + 1);
      const size_t num_transformed = ((((((((((((((dense_n_subjectids
                                                                    +
                                                                    dense_n_subjectids)
                                                                    +
                                                                    dense_n_subjectids)
                                                                    +
                                                                    dense_n_subjectids)
                                                                    +
                                                                    dense_n_subjectids)
                                                                    + 1) +
                                                                    dense_n)
                                                                    +
                                                                    sparse_n)
                                                                    +
                                                                    sparse_n)
                                                                    +
                                                                    sparse_n)
                                                                    +
                                                                    sparse_n)
                                                                    +
                                                                    sparse_n)
                                                                   +
                                                                   sparse_n)
                                                                  + sparse_n)
                                                                 + sparse_n);
      const size_t num_gen_quantities = 
  (dense_n + sparse_n);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((((((((1 + 1) + dense_n_subjectids) + 1) + 1) +
                     dense_n_subjectids) + 1) + 1) + 1) + 1) +
                dense_n_subjectids) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
       1) + 1) + 1) + 1);
      const size_t num_transformed = ((((((((((((((dense_n_subjectids
                                                                    +
                                                                    dense_n_subjectids)
                                                                    +
                                                                    dense_n_subjectids)
                                                                    +
                                                                    dense_n_subjectids)
                                                                    +
                                                                    dense_n_subjectids)
                                                                    + 1) +
                                                                    dense_n)
                                                                    +
                                                                    sparse_n)
                                                                    +
                                                                    sparse_n)
                                                                    +
                                                                    sparse_n)
                                                                    +
                                                                    sparse_n)
                                                                    +
                                                                    sparse_n)
                                                                   +
                                                                   sparse_n)
                                                                  + sparse_n)
                                                                 + sparse_n);
      const size_t num_gen_quantities = 
  (dense_n + sparse_n);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 23> names__{"mu_cl", "s_cl", "z_cl",
      "mu_tmax", "s_t", "z_t", "dense_sigma", "sparse_sigma", "mu_alpha",
      "s_alpha", "z_alpha", "mu_F", "b_cl_age", "b_cl_weight", "b_cl_is_male"
      , "b_cl_creatinine", "b_t_age", "b_t_weight", "b_t_is_male",
      "b_t_creatinine", "b_a_creatinine", "b_F_amio", "tau_F"};
      const std::array<Eigen::Index, 23> constrain_param_sizes__{1, 1,
       dense_n_subjectids, 1, 1, dense_n_subjectids, 1, 1, 1, 1,
       dense_n_subjectids, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = simulation_inference_model_namespace::simulation_inference_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return simulation_inference_model_namespace::profiles__;
}

#endif


