
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace simulate_patients_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 74> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 23, column 3 to column 38)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 24, column 3 to column 38)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 25, column 3 to column 39)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 26, column 3 to column 36)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 28, column 3 to column 34)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 29, column 3 to column 33)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 30, column 3 to column 33)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 32, column 3 to column 85)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 33, column 3 to column 84)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 34, column 3 to column 84)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 36, column 3 to column 43)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 37, column 3 to column 45)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 38, column 3 to column 46)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 39, column 3 to column 50)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 41, column 3 to column 41)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 42, column 3 to column 44)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 43, column 3 to column 45)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 44, column 3 to column 49)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 46, column 3 to column 47)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 48, column 3 to column 141)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 49, column 3 to column 136)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 50, column 3 to column 83)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 51, column 3 to column 44)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 52, column 3 to column 26)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 53, column 3 to column 54)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 54, column 3 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 55, column 3 to column 48)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 56, column 3 to column 43)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 57, column 3 to column 34)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 67, column 7 to column 16)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 69, column 8 to column 76)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 68, column 22 to line 70, column 8)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 68, column 7 to line 70, column 8)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 72, column 7 to column 93)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 64, column 9 to line 73, column 6)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 62, column 7 to column 88)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 61, column 20 to line 63, column 6)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 61, column 5 to line 73, column 6)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 59, column 17 to line 74, column 4)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 59, column 3 to line 74, column 4)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 76, column 3 to column 69)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 8, column 2 to column 8)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 9, column 2 to column 19)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 10, column 17 to column 18)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 10, column 2 to column 20)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 11, column 9 to column 10)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 11, column 2 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 12, column 9 to column 10)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 12, column 2 to column 16)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 13, column 9 to column 10)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 13, column 2 to column 19)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 14, column 9 to column 10)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 14, column 2 to column 23)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 15, column 9 to column 10)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 15, column 2 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 16, column 9 to column 10)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 16, column 2 to column 20)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 17, column 9 to column 10)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 17, column 2 to column 17)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 19, column 2 to column 19)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 32, column 10 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 33, column 10 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 34, column 10 to column 22)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 48, column 10 to column 11)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 49, column 10 to column 11)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 50, column 10 to column 11)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 51, column 10 to column 11)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 52, column 10 to column 11)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 53, column 10 to column 11)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 55, column 10 to column 11)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 57, column 31 to column 32)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 3, column 4 to column 78)",
 " (in '/Users/demetri/gitrepos/PKBayes3/python/simulation_models/simulate_patients.stan', line 2, column 67 to line 4, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__, stan::promote_args_t<T5__>>
pkprofile(const T0__& t, const T1__& D, const T2__& f, const T3__& cl,
          const T4__& ka, const T5__& ke, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__>>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 72;
    return (((((D * f) * ka) * ke) / (cl * (ke - ka))) *
             (stan::math::exp((-ka * t)) - stan::math::exp((-ke * t))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct pkprofile_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__, stan::promote_args_t<T5__>>
operator()(const T0__& t, const T1__& D, const T2__& f, const T3__& cl,
           const T4__& ka, const T5__& ke, std::ostream* pstream__)  const 
{
return pkprofile(t, D, f, cl, ka, ke, pstream__);
}
};

class simulate_patients_model final : public model_base_crtp<simulate_patients_model> {

 private:
  int n;
  int n_subjectids;
  std::vector<int> subjectids;
  Eigen::Matrix<double, -1, 1> time__;
  Eigen::Matrix<double, -1, 1> age__;
  Eigen::Matrix<double, -1, 1> weight__;
  Eigen::Matrix<double, -1, 1> creatinine__;
  Eigen::Matrix<double, -1, 1> amio__;
  Eigen::Matrix<double, -1, 1> is_male__;
  Eigen::Matrix<double, -1, 1> dose__;
  double amio_effect; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> age{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> weight{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> creatinine{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> amio{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> is_male{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dose{nullptr, 0};
 
 public:
  ~simulate_patients_model() { }
  
  inline std::string model_name() const final { return "simulate_patients_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  simulate_patients_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "simulate_patients_model_namespace::simulate_patients_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 42;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 42;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 43;
      context__.validate_dims("data initialization","n_subjectids","int",
           std::vector<size_t>{});
      n_subjectids = std::numeric_limits<int>::min();
      
      current_statement__ = 43;
      n_subjectids = context__.vals_i("n_subjectids")[(1 - 1)];
      current_statement__ = 44;
      validate_non_negative_index("subjectids", "n", n);
      current_statement__ = 45;
      context__.validate_dims("data initialization","subjectids","int",
           std::vector<size_t>{static_cast<size_t>(n)});
      subjectids = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 45;
      subjectids = context__.vals_i("subjectids");
      current_statement__ = 46;
      validate_non_negative_index("time", "n", n);
      current_statement__ = 47;
      context__.validate_dims("data initialization","time","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      time__ = Eigen::Matrix<double, -1, 1>(n);
      new (&time) Eigen::Map<Eigen::Matrix<double, -1, 1>>(time__.data(), n);
      
      {
        std::vector<local_scalar_t__> time_flat__;
        current_statement__ = 47;
        time_flat__ = context__.vals_r("time");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 47;
          assign(time, time_flat__[(pos__ - 1)],
            "assigning variable time", index_uni(sym1__));
          current_statement__ = 47;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 48;
      validate_non_negative_index("age", "n", n);
      current_statement__ = 49;
      context__.validate_dims("data initialization","age","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      age__ = Eigen::Matrix<double, -1, 1>(n);
      new (&age) Eigen::Map<Eigen::Matrix<double, -1, 1>>(age__.data(), n);
      
      {
        std::vector<local_scalar_t__> age_flat__;
        current_statement__ = 49;
        age_flat__ = context__.vals_r("age");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 49;
          assign(age, age_flat__[(pos__ - 1)],
            "assigning variable age", index_uni(sym1__));
          current_statement__ = 49;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 50;
      validate_non_negative_index("weight", "n", n);
      current_statement__ = 51;
      context__.validate_dims("data initialization","weight","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      weight__ = Eigen::Matrix<double, -1, 1>(n);
      new (&weight) Eigen::Map<Eigen::Matrix<double, -1, 1>>(weight__.data(), n);
      
      
      {
        std::vector<local_scalar_t__> weight_flat__;
        current_statement__ = 51;
        weight_flat__ = context__.vals_r("weight");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 51;
          assign(weight, weight_flat__[(pos__ - 1)],
            "assigning variable weight", index_uni(sym1__));
          current_statement__ = 51;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 52;
      validate_non_negative_index("creatinine", "n", n);
      current_statement__ = 53;
      context__.validate_dims("data initialization","creatinine","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      creatinine__ = Eigen::Matrix<double, -1, 1>(n);
      new (&creatinine) Eigen::Map<Eigen::Matrix<double, -1, 1>>(creatinine__.data(), n);
      
      
      {
        std::vector<local_scalar_t__> creatinine_flat__;
        current_statement__ = 53;
        creatinine_flat__ = context__.vals_r("creatinine");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 53;
          assign(creatinine, creatinine_flat__[(pos__ - 1)],
            "assigning variable creatinine", index_uni(sym1__));
          current_statement__ = 53;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 54;
      validate_non_negative_index("amio", "n", n);
      current_statement__ = 55;
      context__.validate_dims("data initialization","amio","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      amio__ = Eigen::Matrix<double, -1, 1>(n);
      new (&amio) Eigen::Map<Eigen::Matrix<double, -1, 1>>(amio__.data(), n);
      
      {
        std::vector<local_scalar_t__> amio_flat__;
        current_statement__ = 55;
        amio_flat__ = context__.vals_r("amio");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 55;
          assign(amio, amio_flat__[(pos__ - 1)],
            "assigning variable amio", index_uni(sym1__));
          current_statement__ = 55;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 56;
      validate_non_negative_index("is_male", "n", n);
      current_statement__ = 57;
      context__.validate_dims("data initialization","is_male","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      is_male__ = Eigen::Matrix<double, -1, 1>(n);
      new (&is_male) Eigen::Map<Eigen::Matrix<double, -1, 1>>(is_male__.data(), n);
      
      
      {
        std::vector<local_scalar_t__> is_male_flat__;
        current_statement__ = 57;
        is_male_flat__ = context__.vals_r("is_male");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 57;
          assign(is_male, is_male_flat__[(pos__ - 1)],
            "assigning variable is_male", index_uni(sym1__));
          current_statement__ = 57;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 58;
      validate_non_negative_index("dose", "n", n);
      current_statement__ = 59;
      context__.validate_dims("data initialization","dose","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      dose__ = Eigen::Matrix<double, -1, 1>(n);
      new (&dose) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dose__.data(), n);
      
      {
        std::vector<local_scalar_t__> dose_flat__;
        current_statement__ = 59;
        dose_flat__ = context__.vals_r("dose");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 59;
          assign(dose, dose_flat__[(pos__ - 1)],
            "assigning variable dose", index_uni(sym1__));
          current_statement__ = 59;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 60;
      context__.validate_dims("data initialization","amio_effect","double",
           std::vector<size_t>{});
      amio_effect = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 60;
      amio_effect = context__.vals_r("amio_effect")[(1 - 1)];
      current_statement__ = 61;
      validate_non_negative_index("z_cl", "n_subjectids", n_subjectids);
      current_statement__ = 62;
      validate_non_negative_index("z_t", "n_subjectids", n_subjectids);
      current_statement__ = 63;
      validate_non_negative_index("z_a", "n_subjectids", n_subjectids);
      current_statement__ = 64;
      validate_non_negative_index("cl", "n", n);
      current_statement__ = 65;
      validate_non_negative_index("tmax", "n", n);
      current_statement__ = 66;
      validate_non_negative_index("a", "n", n);
      current_statement__ = 67;
      validate_non_negative_index("ka", "n", n);
      current_statement__ = 68;
      validate_non_negative_index("ke", "n", n);
      current_statement__ = 69;
      validate_non_negative_index("f", "n", n);
      current_statement__ = 70;
      validate_non_negative_index("concentration", "n", n);
      current_statement__ = 71;
      validate_non_negative_index("observed_concentration", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "simulate_patients_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "simulate_patients_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double mu_cl;
      mu_cl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu_cl = normal_rng(0.5, 0.04, base_rng__);
      double mu_t;
      mu_t = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      mu_t = normal_rng(0.93, 0.05, base_rng__);
      double mu_a;
      mu_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      mu_a = normal_rng(-1.35, 0.14, base_rng__);
      double mu_f;
      mu_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu_f = normal_rng(0, 0.025, base_rng__);
      double s_cl;
      s_cl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      s_cl = gamma_rng(69, 338, base_rng__);
      double s_t;
      s_t = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      s_t = gamma_rng(75, 350, base_rng__);
      double s_a;
      s_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      s_a = gamma_rng(10, 102, base_rng__);
      Eigen::Matrix<double, -1, 1> z_cl;
      z_cl = Eigen::Matrix<double, -1, 1>(n_subjectids);
      stan::math::fill(z_cl, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      assign(z_cl,
        to_vector(normal_rng(rep_vector(0, n_subjectids), 1, base_rng__)),
        "assigning variable z_cl");
      Eigen::Matrix<double, -1, 1> z_t;
      z_t = Eigen::Matrix<double, -1, 1>(n_subjectids);
      stan::math::fill(z_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      assign(z_t,
        to_vector(normal_rng(rep_vector(0, n_subjectids), 1, base_rng__)),
        "assigning variable z_t");
      Eigen::Matrix<double, -1, 1> z_a;
      z_a = Eigen::Matrix<double, -1, 1>(n_subjectids);
      stan::math::fill(z_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(z_a,
        to_vector(normal_rng(rep_vector(0, n_subjectids), 1, base_rng__)),
        "assigning variable z_a");
      double b_cl_age;
      b_cl_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      b_cl_age = normal_rng(-0.15, 0.01, base_rng__);
      double b_cl_weight;
      b_cl_weight = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      b_cl_weight = normal_rng(0.09, 0.02, base_rng__);
      double b_cl_is_male;
      b_cl_is_male = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      b_cl_is_male = normal_rng(0.23, 0.04, base_rng__);
      double b_cl_creatinine;
      b_cl_creatinine = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      b_cl_creatinine = normal_rng(-0.07, 0.01, base_rng__);
      double b_t_age;
      b_t_age = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      b_t_age = normal_rng(0.03, 0.03, base_rng__);
      double b_t_weight;
      b_t_weight = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      b_t_weight = normal_rng(0.04, 0.04, base_rng__);
      double b_t_is_male;
      b_t_is_male = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      b_t_is_male = normal_rng(0.02, 0.06, base_rng__);
      double b_t_creatinine;
      b_t_creatinine = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      b_t_creatinine = normal_rng(-0.05, 0.05, base_rng__);
      double b_a_creatinine;
      b_a_creatinine = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      b_a_creatinine = normal_rng(-0.3, 0.1, base_rng__);
      Eigen::Matrix<double, -1, 1> cl;
      cl = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(cl, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      assign(cl,
        stan::math::exp(
          add(
            add(
              add(
                add(
                  add(mu_cl,
                    multiply(s_cl,
                      rvalue(z_cl, "z_cl", index_multi(subjectids)))),
                  multiply(b_cl_age, age)), multiply(b_cl_weight, weight)),
              multiply(b_cl_is_male, is_male)),
            multiply(b_cl_creatinine, creatinine))), "assigning variable cl");
      Eigen::Matrix<double, -1, 1> tmax;
      tmax = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(tmax, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 21;
      assign(tmax,
        stan::math::exp(
          add(
            add(
              add(
                add(
                  add(mu_t,
                    multiply(s_t,
                      rvalue(z_t, "z_t", index_multi(subjectids)))),
                  multiply(b_t_age, age)), multiply(b_t_weight, weight)),
              multiply(b_t_is_male, is_male)),
            multiply(b_t_creatinine, creatinine))), "assigning variable tmax");
      Eigen::Matrix<double, -1, 1> a;
      a = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 22;
      assign(a,
        inv_logit(
          add(
            add(mu_a,
              multiply(s_a, rvalue(z_a, "z_a", index_multi(subjectids)))),
            multiply(b_a_creatinine, creatinine))), "assigning variable a");
      Eigen::Matrix<double, -1, 1> ka;
      ka = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(ka, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 23;
      assign(ka,
        elt_divide(stan::math::log(a), elt_multiply(tmax, subtract(a, 1))),
        "assigning variable ka");
      Eigen::Matrix<double, -1, 1> ke;
      ke = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(ke, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 24;
      assign(ke, elt_multiply(a, ka), "assigning variable ke");
      Eigen::Matrix<double, -1, 1> f;
      f = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(f, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 25;
      assign(f, inv_logit(add(mu_f, multiply(amio_effect, amio))),
        "assigning variable f");
      double c0;
      c0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 26;
      c0 = 0.0;
      Eigen::Matrix<double, -1, 1> concentration;
      concentration = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(concentration, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 27;
      assign(concentration, rep_vector(0.0, n),
        "assigning variable concentration");
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 28;
      sigma = lognormal_rng(-1.75, 0.05, base_rng__);
      std::vector<double> observed_concentration;
      observed_concentration = std::vector<double>(n, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 40;
      for (int ii = 1; ii <= n; ++ii) {
        current_statement__ = 38;
        if (logical_lt(rvalue(time, "time", index_uni(ii)), 13)) {
          current_statement__ = 36;
          assign(concentration,
            pkprofile(rvalue(time, "time", index_uni(ii)),
              rvalue(dose, "dose", index_uni(ii)),
              rvalue(f, "f", index_uni(ii)), rvalue(cl, "cl", index_uni(ii)),
              rvalue(ka, "ka", index_uni(ii)),
              rvalue(ke, "ke", index_uni(ii)), pstream__),
            "assigning variable concentration", index_uni(ii));
        } else {
          current_statement__ = 30;
          c0 = 0.0;
          current_statement__ = 33;
          for (int jj = 1; jj <= 14; ++jj) {
            current_statement__ = 31;
            c0 = (c0 +
                   pkprofile((12 * jj), rvalue(dose, "dose", index_uni(ii)),
                     rvalue(f, "f", index_uni(ii)),
                     rvalue(cl, "cl", index_uni(ii)),
                     rvalue(ka, "ka", index_uni(ii)),
                     rvalue(ke, "ke", index_uni(ii)), pstream__));
          }
          current_statement__ = 34;
          assign(concentration,
            (c0 +
              pkprofile(rvalue(time, "time", index_uni(ii)),
                rvalue(dose, "dose", index_uni(ii)),
                rvalue(f, "f", index_uni(ii)),
                rvalue(cl, "cl", index_uni(ii)),
                rvalue(ka, "ka", index_uni(ii)),
                rvalue(ke, "ke", index_uni(ii)), pstream__)),
            "assigning variable concentration", index_uni(ii));
        }
      }
      current_statement__ = 41;
      assign(observed_concentration,
        lognormal_rng(stan::math::log(concentration), sigma, base_rng__),
        "assigning variable observed_concentration");
      out__.write(mu_cl);
      out__.write(mu_t);
      out__.write(mu_a);
      out__.write(mu_f);
      out__.write(s_cl);
      out__.write(s_t);
      out__.write(s_a);
      out__.write(z_cl);
      out__.write(z_t);
      out__.write(z_a);
      out__.write(b_cl_age);
      out__.write(b_cl_weight);
      out__.write(b_cl_is_male);
      out__.write(b_cl_creatinine);
      out__.write(b_t_age);
      out__.write(b_t_weight);
      out__.write(b_t_is_male);
      out__.write(b_t_creatinine);
      out__.write(b_a_creatinine);
      out__.write(cl);
      out__.write(tmax);
      out__.write(a);
      out__.write(ka);
      out__.write(ke);
      out__.write(f);
      out__.write(c0);
      out__.write(concentration);
      out__.write(sigma);
      out__.write(observed_concentration);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_cl", "mu_t", "mu_a", "mu_f",
      "s_cl", "s_t", "s_a", "z_cl", "z_t", "z_a", "b_cl_age", "b_cl_weight",
      "b_cl_is_male", "b_cl_creatinine", "b_t_age", "b_t_weight",
      "b_t_is_male", "b_t_creatinine", "b_a_creatinine", "cl", "tmax", "a",
      "ka", "ke", "f", "c0", "concentration", "sigma",
      "observed_concentration"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(n_subjectids)},
      std::vector<size_t>{static_cast<size_t>(n_subjectids)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(n)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(n)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mu_cl");
      param_names__.emplace_back(std::string() + "mu_t");
      param_names__.emplace_back(std::string() + "mu_a");
      param_names__.emplace_back(std::string() + "mu_f");
      param_names__.emplace_back(std::string() + "s_cl");
      param_names__.emplace_back(std::string() + "s_t");
      param_names__.emplace_back(std::string() + "s_a");
      for (int sym1__ = 1; sym1__ <= n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_a" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "b_cl_age");
      param_names__.emplace_back(std::string() + "b_cl_weight");
      param_names__.emplace_back(std::string() + "b_cl_is_male");
      param_names__.emplace_back(std::string() + "b_cl_creatinine");
      param_names__.emplace_back(std::string() + "b_t_age");
      param_names__.emplace_back(std::string() + "b_t_weight");
      param_names__.emplace_back(std::string() + "b_t_is_male");
      param_names__.emplace_back(std::string() + "b_t_creatinine");
      param_names__.emplace_back(std::string() + "b_a_creatinine");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tmax" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ka" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ke" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "c0");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "concentration" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "sigma");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "observed_concentration" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mu_cl");
      param_names__.emplace_back(std::string() + "mu_t");
      param_names__.emplace_back(std::string() + "mu_a");
      param_names__.emplace_back(std::string() + "mu_f");
      param_names__.emplace_back(std::string() + "s_cl");
      param_names__.emplace_back(std::string() + "s_t");
      param_names__.emplace_back(std::string() + "s_a");
      for (int sym1__ = 1; sym1__ <= n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_subjectids; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_a" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "b_cl_age");
      param_names__.emplace_back(std::string() + "b_cl_weight");
      param_names__.emplace_back(std::string() + "b_cl_is_male");
      param_names__.emplace_back(std::string() + "b_cl_creatinine");
      param_names__.emplace_back(std::string() + "b_t_age");
      param_names__.emplace_back(std::string() + "b_t_weight");
      param_names__.emplace_back(std::string() + "b_t_is_male");
      param_names__.emplace_back(std::string() + "b_t_creatinine");
      param_names__.emplace_back(std::string() + "b_a_creatinine");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cl" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tmax" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ka" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ke" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "c0");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "concentration" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "sigma");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "observed_concentration" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_cl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_t\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_f\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"s_cl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"s_t\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"s_a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"z_cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_subjectids) + "},\"block\":\"generated_quantities\"},{\"name\":\"z_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_subjectids) + "},\"block\":\"generated_quantities\"},{\"name\":\"z_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_subjectids) + "},\"block\":\"generated_quantities\"},{\"name\":\"b_cl_age\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_cl_weight\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_cl_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_cl_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_t_age\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_t_weight\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_t_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_t_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_a_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"tmax\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"ka\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"c0\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"concentration\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"observed_concentration\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_cl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_t\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_f\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"s_cl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"s_t\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"s_a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"z_cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_subjectids) + "},\"block\":\"generated_quantities\"},{\"name\":\"z_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_subjectids) + "},\"block\":\"generated_quantities\"},{\"name\":\"z_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_subjectids) + "},\"block\":\"generated_quantities\"},{\"name\":\"b_cl_age\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_cl_weight\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_cl_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_cl_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_t_age\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_t_weight\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_t_is_male\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_t_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_a_creatinine\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"cl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"tmax\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"ka\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"c0\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"concentration\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"observed_concentration\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  ((((((((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + n_subjectids)
                        + n_subjectids) + n_subjectids) + 1) + 1) + 1) + 1) +
                  1) + 1) + 1) + 1) + 1) + n) + n) + n) + n) + n) + n) + 1) +
      n) + 1) + n);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  ((((((((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + n_subjectids)
                        + n_subjectids) + n_subjectids) + 1) + 1) + 1) + 1) +
                  1) + 1) + 1) + 1) + 1) + n) + n) + n) + n) + n) + n) + 1) +
      n) + 1) + n);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = simulate_patients_model_namespace::simulate_patients_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return simulate_patients_model_namespace::profiles__;
}

#endif


